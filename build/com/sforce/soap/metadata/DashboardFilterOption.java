package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class DashboardFilterOption implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public DashboardFilterOption() {}

    /**
     * element : operator of type {http://soap.sforce.com/2006/04/metadata}DashboardFilterOperation
     * java type: com.sforce.soap.metadata.DashboardFilterOperation
     */
    private static final com.sforce.ws.bind.TypeInfo operator__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","operator","http://soap.sforce.com/2006/04/metadata","DashboardFilterOperation",1,1,true);

    private boolean operator__is_set = false;

    private com.sforce.soap.metadata.DashboardFilterOperation operator;

    public com.sforce.soap.metadata.DashboardFilterOperation getOperator() {
      return operator;
    }

    public void setOperator(com.sforce.soap.metadata.DashboardFilterOperation operator) {
      this.operator = operator;
      operator__is_set = true;
    }

    protected void setOperator(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, operator__typeInfo)) {
        setOperator((com.sforce.soap.metadata.DashboardFilterOperation)__typeMapper.readObject(__in, operator__typeInfo, com.sforce.soap.metadata.DashboardFilterOperation.class));
      }
    }

    /**
     * element : values of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String[]
     */
    private static final com.sforce.ws.bind.TypeInfo values__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","values","http://www.w3.org/2001/XMLSchema","string",0,-1,true);

    private boolean values__is_set = false;

    private java.lang.String[] values = new java.lang.String[0];

    public java.lang.String[] getValues() {
      return values;
    }

    public void setValues(java.lang.String[] values) {
      this.values = values;
      values__is_set = true;
    }

    protected void setValues(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, values__typeInfo)) {
        setValues((java.lang.String[])__typeMapper.readObject(__in, values__typeInfo, java.lang.String[].class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, operator__typeInfo, operator, operator__is_set);
       __typeMapper.writeObject(__out, values__typeInfo, values, values__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setOperator(__in, __typeMapper);
        setValues(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[DashboardFilterOption ");
      sb.append(" operator='").append(com.sforce.ws.util.Verbose.toString(operator)).append("'\n");
      sb.append(" values='").append(com.sforce.ws.util.Verbose.toString(values)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
