package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class Deploy_element implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public Deploy_element() {}

    /**
     * element : ZipFile of type {http://www.w3.org/2001/XMLSchema}base64Binary
     * java type: byte[]
     */
    private static final com.sforce.ws.bind.TypeInfo ZipFile__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","ZipFile","http://www.w3.org/2001/XMLSchema","base64Binary",1,1,true);

    private boolean ZipFile__is_set = false;

    private byte[] ZipFile;

    public byte[] getZipFile() {
      return ZipFile;
    }

    public void setZipFile(byte[] ZipFile) {
      this.ZipFile = ZipFile;
      ZipFile__is_set = true;
    }

    protected void setZipFile(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, ZipFile__typeInfo)) {
        setZipFile((byte[])__typeMapper.readObject(__in, ZipFile__typeInfo, byte[].class));
      }
    }

    /**
     * element : DeployOptions of type {http://soap.sforce.com/2006/04/metadata}DeployOptions
     * java type: com.sforce.soap.metadata.DeployOptions
     */
    private static final com.sforce.ws.bind.TypeInfo DeployOptions__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","DeployOptions","http://soap.sforce.com/2006/04/metadata","DeployOptions",1,1,true);

    private boolean DeployOptions__is_set = false;

    private com.sforce.soap.metadata.DeployOptions DeployOptions;

    public com.sforce.soap.metadata.DeployOptions getDeployOptions() {
      return DeployOptions;
    }

    public void setDeployOptions(com.sforce.soap.metadata.DeployOptions DeployOptions) {
      this.DeployOptions = DeployOptions;
      DeployOptions__is_set = true;
    }

    protected void setDeployOptions(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, DeployOptions__typeInfo)) {
        setDeployOptions((com.sforce.soap.metadata.DeployOptions)__typeMapper.readObject(__in, DeployOptions__typeInfo, com.sforce.soap.metadata.DeployOptions.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, ZipFile__typeInfo, ZipFile, ZipFile__is_set);
       __typeMapper.writeObject(__out, DeployOptions__typeInfo, DeployOptions, DeployOptions__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setZipFile(__in, __typeMapper);
        setDeployOptions(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[Deploy_element ");
      sb.append(" ZipFile='").append(com.sforce.ws.util.Verbose.toString(ZipFile)).append("'\n");
      sb.append(" DeployOptions='").append(com.sforce.ws.util.Verbose.toString(DeployOptions)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
