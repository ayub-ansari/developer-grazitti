package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class ConnectedAppOauthConfig implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public ConnectedAppOauthConfig() {}

    /**
     * element : callbackUrl of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo callbackUrl__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","callbackUrl","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean callbackUrl__is_set = false;

    private java.lang.String callbackUrl;

    public java.lang.String getCallbackUrl() {
      return callbackUrl;
    }

    public void setCallbackUrl(java.lang.String callbackUrl) {
      this.callbackUrl = callbackUrl;
      callbackUrl__is_set = true;
    }

    protected void setCallbackUrl(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, callbackUrl__typeInfo)) {
        setCallbackUrl(__typeMapper.readString(__in, callbackUrl__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : certificate of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo certificate__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","certificate","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean certificate__is_set = false;

    private java.lang.String certificate;

    public java.lang.String getCertificate() {
      return certificate;
    }

    public void setCertificate(java.lang.String certificate) {
      this.certificate = certificate;
      certificate__is_set = true;
    }

    protected void setCertificate(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, certificate__typeInfo)) {
        setCertificate(__typeMapper.readString(__in, certificate__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : consumerKey of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo consumerKey__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","consumerKey","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean consumerKey__is_set = false;

    private java.lang.String consumerKey;

    public java.lang.String getConsumerKey() {
      return consumerKey;
    }

    public void setConsumerKey(java.lang.String consumerKey) {
      this.consumerKey = consumerKey;
      consumerKey__is_set = true;
    }

    protected void setConsumerKey(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, consumerKey__typeInfo)) {
        setConsumerKey(__typeMapper.readString(__in, consumerKey__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : consumerSecret of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo consumerSecret__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","consumerSecret","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean consumerSecret__is_set = false;

    private java.lang.String consumerSecret;

    public java.lang.String getConsumerSecret() {
      return consumerSecret;
    }

    public void setConsumerSecret(java.lang.String consumerSecret) {
      this.consumerSecret = consumerSecret;
      consumerSecret__is_set = true;
    }

    protected void setConsumerSecret(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, consumerSecret__typeInfo)) {
        setConsumerSecret(__typeMapper.readString(__in, consumerSecret__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : scopes of type {http://soap.sforce.com/2006/04/metadata}ConnectedAppOauthAccessScope
     * java type: com.sforce.soap.metadata.ConnectedAppOauthAccessScope[]
     */
    private static final com.sforce.ws.bind.TypeInfo scopes__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","scopes","http://soap.sforce.com/2006/04/metadata","ConnectedAppOauthAccessScope",0,-1,true);

    private boolean scopes__is_set = false;

    private com.sforce.soap.metadata.ConnectedAppOauthAccessScope[] scopes = new com.sforce.soap.metadata.ConnectedAppOauthAccessScope[0];

    public com.sforce.soap.metadata.ConnectedAppOauthAccessScope[] getScopes() {
      return scopes;
    }

    public void setScopes(com.sforce.soap.metadata.ConnectedAppOauthAccessScope[] scopes) {
      this.scopes = scopes;
      scopes__is_set = true;
    }

    protected void setScopes(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, scopes__typeInfo)) {
        setScopes((com.sforce.soap.metadata.ConnectedAppOauthAccessScope[])__typeMapper.readObject(__in, scopes__typeInfo, com.sforce.soap.metadata.ConnectedAppOauthAccessScope[].class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeString(__out, callbackUrl__typeInfo, callbackUrl, callbackUrl__is_set);
       __typeMapper.writeString(__out, certificate__typeInfo, certificate, certificate__is_set);
       __typeMapper.writeString(__out, consumerKey__typeInfo, consumerKey, consumerKey__is_set);
       __typeMapper.writeString(__out, consumerSecret__typeInfo, consumerSecret, consumerSecret__is_set);
       __typeMapper.writeObject(__out, scopes__typeInfo, scopes, scopes__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setCallbackUrl(__in, __typeMapper);
        setCertificate(__in, __typeMapper);
        setConsumerKey(__in, __typeMapper);
        setConsumerSecret(__in, __typeMapper);
        setScopes(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[ConnectedAppOauthConfig ");
      sb.append(" callbackUrl='").append(com.sforce.ws.util.Verbose.toString(callbackUrl)).append("'\n");
      sb.append(" certificate='").append(com.sforce.ws.util.Verbose.toString(certificate)).append("'\n");
      sb.append(" consumerKey='").append(com.sforce.ws.util.Verbose.toString(consumerKey)).append("'\n");
      sb.append(" consumerSecret='").append(com.sforce.ws.util.Verbose.toString(consumerSecret)).append("'\n");
      sb.append(" scopes='").append(com.sforce.ws.util.Verbose.toString(scopes)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
