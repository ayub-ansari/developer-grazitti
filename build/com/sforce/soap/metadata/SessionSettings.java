package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class SessionSettings implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public SessionSettings() {}

    /**
     * element : disableTimeoutWarning of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo disableTimeoutWarning__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","disableTimeoutWarning","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean disableTimeoutWarning__is_set = false;

    private boolean disableTimeoutWarning;

    public boolean getDisableTimeoutWarning() {
      return disableTimeoutWarning;
    }

    public boolean isDisableTimeoutWarning() {
      return disableTimeoutWarning;
    }

    public void setDisableTimeoutWarning(boolean disableTimeoutWarning) {
      this.disableTimeoutWarning = disableTimeoutWarning;
      disableTimeoutWarning__is_set = true;
    }

    protected void setDisableTimeoutWarning(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, disableTimeoutWarning__typeInfo)) {
        setDisableTimeoutWarning(__typeMapper.readBoolean(__in, disableTimeoutWarning__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableCSPOnEmail of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableCSPOnEmail__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableCSPOnEmail","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableCSPOnEmail__is_set = false;

    private boolean enableCSPOnEmail;

    public boolean getEnableCSPOnEmail() {
      return enableCSPOnEmail;
    }

    public boolean isEnableCSPOnEmail() {
      return enableCSPOnEmail;
    }

    public void setEnableCSPOnEmail(boolean enableCSPOnEmail) {
      this.enableCSPOnEmail = enableCSPOnEmail;
      enableCSPOnEmail__is_set = true;
    }

    protected void setEnableCSPOnEmail(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableCSPOnEmail__typeInfo)) {
        setEnableCSPOnEmail(__typeMapper.readBoolean(__in, enableCSPOnEmail__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableCSRFOnGet of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableCSRFOnGet__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableCSRFOnGet","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableCSRFOnGet__is_set = false;

    private boolean enableCSRFOnGet;

    public boolean getEnableCSRFOnGet() {
      return enableCSRFOnGet;
    }

    public boolean isEnableCSRFOnGet() {
      return enableCSRFOnGet;
    }

    public void setEnableCSRFOnGet(boolean enableCSRFOnGet) {
      this.enableCSRFOnGet = enableCSRFOnGet;
      enableCSRFOnGet__is_set = true;
    }

    protected void setEnableCSRFOnGet(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableCSRFOnGet__typeInfo)) {
        setEnableCSRFOnGet(__typeMapper.readBoolean(__in, enableCSRFOnGet__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableCSRFOnPost of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableCSRFOnPost__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableCSRFOnPost","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableCSRFOnPost__is_set = false;

    private boolean enableCSRFOnPost;

    public boolean getEnableCSRFOnPost() {
      return enableCSRFOnPost;
    }

    public boolean isEnableCSRFOnPost() {
      return enableCSRFOnPost;
    }

    public void setEnableCSRFOnPost(boolean enableCSRFOnPost) {
      this.enableCSRFOnPost = enableCSRFOnPost;
      enableCSRFOnPost__is_set = true;
    }

    protected void setEnableCSRFOnPost(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableCSRFOnPost__typeInfo)) {
        setEnableCSRFOnPost(__typeMapper.readBoolean(__in, enableCSRFOnPost__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableCacheAndAutocomplete of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableCacheAndAutocomplete__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableCacheAndAutocomplete","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableCacheAndAutocomplete__is_set = false;

    private boolean enableCacheAndAutocomplete;

    public boolean getEnableCacheAndAutocomplete() {
      return enableCacheAndAutocomplete;
    }

    public boolean isEnableCacheAndAutocomplete() {
      return enableCacheAndAutocomplete;
    }

    public void setEnableCacheAndAutocomplete(boolean enableCacheAndAutocomplete) {
      this.enableCacheAndAutocomplete = enableCacheAndAutocomplete;
      enableCacheAndAutocomplete__is_set = true;
    }

    protected void setEnableCacheAndAutocomplete(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableCacheAndAutocomplete__typeInfo)) {
        setEnableCacheAndAutocomplete(__typeMapper.readBoolean(__in, enableCacheAndAutocomplete__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableClickjackNonsetupSFDC of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableClickjackNonsetupSFDC__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableClickjackNonsetupSFDC","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableClickjackNonsetupSFDC__is_set = false;

    private boolean enableClickjackNonsetupSFDC;

    public boolean getEnableClickjackNonsetupSFDC() {
      return enableClickjackNonsetupSFDC;
    }

    public boolean isEnableClickjackNonsetupSFDC() {
      return enableClickjackNonsetupSFDC;
    }

    public void setEnableClickjackNonsetupSFDC(boolean enableClickjackNonsetupSFDC) {
      this.enableClickjackNonsetupSFDC = enableClickjackNonsetupSFDC;
      enableClickjackNonsetupSFDC__is_set = true;
    }

    protected void setEnableClickjackNonsetupSFDC(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableClickjackNonsetupSFDC__typeInfo)) {
        setEnableClickjackNonsetupSFDC(__typeMapper.readBoolean(__in, enableClickjackNonsetupSFDC__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableClickjackNonsetupUser of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableClickjackNonsetupUser__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableClickjackNonsetupUser","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableClickjackNonsetupUser__is_set = false;

    private boolean enableClickjackNonsetupUser;

    public boolean getEnableClickjackNonsetupUser() {
      return enableClickjackNonsetupUser;
    }

    public boolean isEnableClickjackNonsetupUser() {
      return enableClickjackNonsetupUser;
    }

    public void setEnableClickjackNonsetupUser(boolean enableClickjackNonsetupUser) {
      this.enableClickjackNonsetupUser = enableClickjackNonsetupUser;
      enableClickjackNonsetupUser__is_set = true;
    }

    protected void setEnableClickjackNonsetupUser(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableClickjackNonsetupUser__typeInfo)) {
        setEnableClickjackNonsetupUser(__typeMapper.readBoolean(__in, enableClickjackNonsetupUser__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableClickjackNonsetupUserHeaderless of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableClickjackNonsetupUserHeaderless__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableClickjackNonsetupUserHeaderless","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableClickjackNonsetupUserHeaderless__is_set = false;

    private boolean enableClickjackNonsetupUserHeaderless;

    public boolean getEnableClickjackNonsetupUserHeaderless() {
      return enableClickjackNonsetupUserHeaderless;
    }

    public boolean isEnableClickjackNonsetupUserHeaderless() {
      return enableClickjackNonsetupUserHeaderless;
    }

    public void setEnableClickjackNonsetupUserHeaderless(boolean enableClickjackNonsetupUserHeaderless) {
      this.enableClickjackNonsetupUserHeaderless = enableClickjackNonsetupUserHeaderless;
      enableClickjackNonsetupUserHeaderless__is_set = true;
    }

    protected void setEnableClickjackNonsetupUserHeaderless(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableClickjackNonsetupUserHeaderless__typeInfo)) {
        setEnableClickjackNonsetupUserHeaderless(__typeMapper.readBoolean(__in, enableClickjackNonsetupUserHeaderless__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableClickjackSetup of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableClickjackSetup__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableClickjackSetup","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableClickjackSetup__is_set = false;

    private boolean enableClickjackSetup;

    public boolean getEnableClickjackSetup() {
      return enableClickjackSetup;
    }

    public boolean isEnableClickjackSetup() {
      return enableClickjackSetup;
    }

    public void setEnableClickjackSetup(boolean enableClickjackSetup) {
      this.enableClickjackSetup = enableClickjackSetup;
      enableClickjackSetup__is_set = true;
    }

    protected void setEnableClickjackSetup(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableClickjackSetup__typeInfo)) {
        setEnableClickjackSetup(__typeMapper.readBoolean(__in, enableClickjackSetup__typeInfo, boolean.class));
      }
    }

    /**
     * element : enablePostForSessions of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enablePostForSessions__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enablePostForSessions","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enablePostForSessions__is_set = false;

    private boolean enablePostForSessions;

    public boolean getEnablePostForSessions() {
      return enablePostForSessions;
    }

    public boolean isEnablePostForSessions() {
      return enablePostForSessions;
    }

    public void setEnablePostForSessions(boolean enablePostForSessions) {
      this.enablePostForSessions = enablePostForSessions;
      enablePostForSessions__is_set = true;
    }

    protected void setEnablePostForSessions(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enablePostForSessions__typeInfo)) {
        setEnablePostForSessions(__typeMapper.readBoolean(__in, enablePostForSessions__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableSMSIdentity of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableSMSIdentity__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableSMSIdentity","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableSMSIdentity__is_set = false;

    private boolean enableSMSIdentity;

    public boolean getEnableSMSIdentity() {
      return enableSMSIdentity;
    }

    public boolean isEnableSMSIdentity() {
      return enableSMSIdentity;
    }

    public void setEnableSMSIdentity(boolean enableSMSIdentity) {
      this.enableSMSIdentity = enableSMSIdentity;
      enableSMSIdentity__is_set = true;
    }

    protected void setEnableSMSIdentity(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableSMSIdentity__typeInfo)) {
        setEnableSMSIdentity(__typeMapper.readBoolean(__in, enableSMSIdentity__typeInfo, boolean.class));
      }
    }

    /**
     * element : enforceIpRangesEveryRequest of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enforceIpRangesEveryRequest__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enforceIpRangesEveryRequest","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enforceIpRangesEveryRequest__is_set = false;

    private boolean enforceIpRangesEveryRequest;

    public boolean getEnforceIpRangesEveryRequest() {
      return enforceIpRangesEveryRequest;
    }

    public boolean isEnforceIpRangesEveryRequest() {
      return enforceIpRangesEveryRequest;
    }

    public void setEnforceIpRangesEveryRequest(boolean enforceIpRangesEveryRequest) {
      this.enforceIpRangesEveryRequest = enforceIpRangesEveryRequest;
      enforceIpRangesEveryRequest__is_set = true;
    }

    protected void setEnforceIpRangesEveryRequest(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enforceIpRangesEveryRequest__typeInfo)) {
        setEnforceIpRangesEveryRequest(__typeMapper.readBoolean(__in, enforceIpRangesEveryRequest__typeInfo, boolean.class));
      }
    }

    /**
     * element : forceLogoutOnSessionTimeout of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo forceLogoutOnSessionTimeout__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","forceLogoutOnSessionTimeout","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean forceLogoutOnSessionTimeout__is_set = false;

    private boolean forceLogoutOnSessionTimeout;

    public boolean getForceLogoutOnSessionTimeout() {
      return forceLogoutOnSessionTimeout;
    }

    public boolean isForceLogoutOnSessionTimeout() {
      return forceLogoutOnSessionTimeout;
    }

    public void setForceLogoutOnSessionTimeout(boolean forceLogoutOnSessionTimeout) {
      this.forceLogoutOnSessionTimeout = forceLogoutOnSessionTimeout;
      forceLogoutOnSessionTimeout__is_set = true;
    }

    protected void setForceLogoutOnSessionTimeout(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, forceLogoutOnSessionTimeout__typeInfo)) {
        setForceLogoutOnSessionTimeout(__typeMapper.readBoolean(__in, forceLogoutOnSessionTimeout__typeInfo, boolean.class));
      }
    }

    /**
     * element : forceRelogin of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo forceRelogin__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","forceRelogin","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean forceRelogin__is_set = false;

    private boolean forceRelogin;

    public boolean getForceRelogin() {
      return forceRelogin;
    }

    public boolean isForceRelogin() {
      return forceRelogin;
    }

    public void setForceRelogin(boolean forceRelogin) {
      this.forceRelogin = forceRelogin;
      forceRelogin__is_set = true;
    }

    protected void setForceRelogin(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, forceRelogin__typeInfo)) {
        setForceRelogin(__typeMapper.readBoolean(__in, forceRelogin__typeInfo, boolean.class));
      }
    }

    /**
     * element : lockSessionsToDomain of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo lockSessionsToDomain__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","lockSessionsToDomain","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean lockSessionsToDomain__is_set = false;

    private boolean lockSessionsToDomain;

    public boolean getLockSessionsToDomain() {
      return lockSessionsToDomain;
    }

    public boolean isLockSessionsToDomain() {
      return lockSessionsToDomain;
    }

    public void setLockSessionsToDomain(boolean lockSessionsToDomain) {
      this.lockSessionsToDomain = lockSessionsToDomain;
      lockSessionsToDomain__is_set = true;
    }

    protected void setLockSessionsToDomain(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, lockSessionsToDomain__typeInfo)) {
        setLockSessionsToDomain(__typeMapper.readBoolean(__in, lockSessionsToDomain__typeInfo, boolean.class));
      }
    }

    /**
     * element : lockSessionsToIp of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo lockSessionsToIp__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","lockSessionsToIp","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean lockSessionsToIp__is_set = false;

    private boolean lockSessionsToIp;

    public boolean getLockSessionsToIp() {
      return lockSessionsToIp;
    }

    public boolean isLockSessionsToIp() {
      return lockSessionsToIp;
    }

    public void setLockSessionsToIp(boolean lockSessionsToIp) {
      this.lockSessionsToIp = lockSessionsToIp;
      lockSessionsToIp__is_set = true;
    }

    protected void setLockSessionsToIp(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, lockSessionsToIp__typeInfo)) {
        setLockSessionsToIp(__typeMapper.readBoolean(__in, lockSessionsToIp__typeInfo, boolean.class));
      }
    }

    /**
     * element : logoutURL of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo logoutURL__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","logoutURL","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean logoutURL__is_set = false;

    private java.lang.String logoutURL;

    public java.lang.String getLogoutURL() {
      return logoutURL;
    }

    public void setLogoutURL(java.lang.String logoutURL) {
      this.logoutURL = logoutURL;
      logoutURL__is_set = true;
    }

    protected void setLogoutURL(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, logoutURL__typeInfo)) {
        setLogoutURL(__typeMapper.readString(__in, logoutURL__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : securityCentralKillSession of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo securityCentralKillSession__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","securityCentralKillSession","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean securityCentralKillSession__is_set = false;

    private boolean securityCentralKillSession;

    public boolean getSecurityCentralKillSession() {
      return securityCentralKillSession;
    }

    public boolean isSecurityCentralKillSession() {
      return securityCentralKillSession;
    }

    public void setSecurityCentralKillSession(boolean securityCentralKillSession) {
      this.securityCentralKillSession = securityCentralKillSession;
      securityCentralKillSession__is_set = true;
    }

    protected void setSecurityCentralKillSession(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, securityCentralKillSession__typeInfo)) {
        setSecurityCentralKillSession(__typeMapper.readBoolean(__in, securityCentralKillSession__typeInfo, boolean.class));
      }
    }

    /**
     * element : sessionTimeout of type {http://soap.sforce.com/2006/04/metadata}SessionTimeout
     * java type: com.sforce.soap.metadata.SessionTimeout
     */
    private static final com.sforce.ws.bind.TypeInfo sessionTimeout__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","sessionTimeout","http://soap.sforce.com/2006/04/metadata","SessionTimeout",0,1,true);

    private boolean sessionTimeout__is_set = false;

    private com.sforce.soap.metadata.SessionTimeout sessionTimeout;

    public com.sforce.soap.metadata.SessionTimeout getSessionTimeout() {
      return sessionTimeout;
    }

    public void setSessionTimeout(com.sforce.soap.metadata.SessionTimeout sessionTimeout) {
      this.sessionTimeout = sessionTimeout;
      sessionTimeout__is_set = true;
    }

    protected void setSessionTimeout(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, sessionTimeout__typeInfo)) {
        setSessionTimeout((com.sforce.soap.metadata.SessionTimeout)__typeMapper.readObject(__in, sessionTimeout__typeInfo, com.sforce.soap.metadata.SessionTimeout.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeBoolean(__out, disableTimeoutWarning__typeInfo, disableTimeoutWarning, disableTimeoutWarning__is_set);
       __typeMapper.writeBoolean(__out, enableCSPOnEmail__typeInfo, enableCSPOnEmail, enableCSPOnEmail__is_set);
       __typeMapper.writeBoolean(__out, enableCSRFOnGet__typeInfo, enableCSRFOnGet, enableCSRFOnGet__is_set);
       __typeMapper.writeBoolean(__out, enableCSRFOnPost__typeInfo, enableCSRFOnPost, enableCSRFOnPost__is_set);
       __typeMapper.writeBoolean(__out, enableCacheAndAutocomplete__typeInfo, enableCacheAndAutocomplete, enableCacheAndAutocomplete__is_set);
       __typeMapper.writeBoolean(__out, enableClickjackNonsetupSFDC__typeInfo, enableClickjackNonsetupSFDC, enableClickjackNonsetupSFDC__is_set);
       __typeMapper.writeBoolean(__out, enableClickjackNonsetupUser__typeInfo, enableClickjackNonsetupUser, enableClickjackNonsetupUser__is_set);
       __typeMapper.writeBoolean(__out, enableClickjackNonsetupUserHeaderless__typeInfo, enableClickjackNonsetupUserHeaderless, enableClickjackNonsetupUserHeaderless__is_set);
       __typeMapper.writeBoolean(__out, enableClickjackSetup__typeInfo, enableClickjackSetup, enableClickjackSetup__is_set);
       __typeMapper.writeBoolean(__out, enablePostForSessions__typeInfo, enablePostForSessions, enablePostForSessions__is_set);
       __typeMapper.writeBoolean(__out, enableSMSIdentity__typeInfo, enableSMSIdentity, enableSMSIdentity__is_set);
       __typeMapper.writeBoolean(__out, enforceIpRangesEveryRequest__typeInfo, enforceIpRangesEveryRequest, enforceIpRangesEveryRequest__is_set);
       __typeMapper.writeBoolean(__out, forceLogoutOnSessionTimeout__typeInfo, forceLogoutOnSessionTimeout, forceLogoutOnSessionTimeout__is_set);
       __typeMapper.writeBoolean(__out, forceRelogin__typeInfo, forceRelogin, forceRelogin__is_set);
       __typeMapper.writeBoolean(__out, lockSessionsToDomain__typeInfo, lockSessionsToDomain, lockSessionsToDomain__is_set);
       __typeMapper.writeBoolean(__out, lockSessionsToIp__typeInfo, lockSessionsToIp, lockSessionsToIp__is_set);
       __typeMapper.writeString(__out, logoutURL__typeInfo, logoutURL, logoutURL__is_set);
       __typeMapper.writeBoolean(__out, securityCentralKillSession__typeInfo, securityCentralKillSession, securityCentralKillSession__is_set);
       __typeMapper.writeObject(__out, sessionTimeout__typeInfo, sessionTimeout, sessionTimeout__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setDisableTimeoutWarning(__in, __typeMapper);
        setEnableCSPOnEmail(__in, __typeMapper);
        setEnableCSRFOnGet(__in, __typeMapper);
        setEnableCSRFOnPost(__in, __typeMapper);
        setEnableCacheAndAutocomplete(__in, __typeMapper);
        setEnableClickjackNonsetupSFDC(__in, __typeMapper);
        setEnableClickjackNonsetupUser(__in, __typeMapper);
        setEnableClickjackNonsetupUserHeaderless(__in, __typeMapper);
        setEnableClickjackSetup(__in, __typeMapper);
        setEnablePostForSessions(__in, __typeMapper);
        setEnableSMSIdentity(__in, __typeMapper);
        setEnforceIpRangesEveryRequest(__in, __typeMapper);
        setForceLogoutOnSessionTimeout(__in, __typeMapper);
        setForceRelogin(__in, __typeMapper);
        setLockSessionsToDomain(__in, __typeMapper);
        setLockSessionsToIp(__in, __typeMapper);
        setLogoutURL(__in, __typeMapper);
        setSecurityCentralKillSession(__in, __typeMapper);
        setSessionTimeout(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[SessionSettings ");
      sb.append(" disableTimeoutWarning='").append(com.sforce.ws.util.Verbose.toString(disableTimeoutWarning)).append("'\n");
      sb.append(" enableCSPOnEmail='").append(com.sforce.ws.util.Verbose.toString(enableCSPOnEmail)).append("'\n");
      sb.append(" enableCSRFOnGet='").append(com.sforce.ws.util.Verbose.toString(enableCSRFOnGet)).append("'\n");
      sb.append(" enableCSRFOnPost='").append(com.sforce.ws.util.Verbose.toString(enableCSRFOnPost)).append("'\n");
      sb.append(" enableCacheAndAutocomplete='").append(com.sforce.ws.util.Verbose.toString(enableCacheAndAutocomplete)).append("'\n");
      sb.append(" enableClickjackNonsetupSFDC='").append(com.sforce.ws.util.Verbose.toString(enableClickjackNonsetupSFDC)).append("'\n");
      sb.append(" enableClickjackNonsetupUser='").append(com.sforce.ws.util.Verbose.toString(enableClickjackNonsetupUser)).append("'\n");
      sb.append(" enableClickjackNonsetupUserHeaderless='").append(com.sforce.ws.util.Verbose.toString(enableClickjackNonsetupUserHeaderless)).append("'\n");
      sb.append(" enableClickjackSetup='").append(com.sforce.ws.util.Verbose.toString(enableClickjackSetup)).append("'\n");
      sb.append(" enablePostForSessions='").append(com.sforce.ws.util.Verbose.toString(enablePostForSessions)).append("'\n");
      sb.append(" enableSMSIdentity='").append(com.sforce.ws.util.Verbose.toString(enableSMSIdentity)).append("'\n");
      sb.append(" enforceIpRangesEveryRequest='").append(com.sforce.ws.util.Verbose.toString(enforceIpRangesEveryRequest)).append("'\n");
      sb.append(" forceLogoutOnSessionTimeout='").append(com.sforce.ws.util.Verbose.toString(forceLogoutOnSessionTimeout)).append("'\n");
      sb.append(" forceRelogin='").append(com.sforce.ws.util.Verbose.toString(forceRelogin)).append("'\n");
      sb.append(" lockSessionsToDomain='").append(com.sforce.ws.util.Verbose.toString(lockSessionsToDomain)).append("'\n");
      sb.append(" lockSessionsToIp='").append(com.sforce.ws.util.Verbose.toString(lockSessionsToIp)).append("'\n");
      sb.append(" logoutURL='").append(com.sforce.ws.util.Verbose.toString(logoutURL)).append("'\n");
      sb.append(" securityCentralKillSession='").append(com.sforce.ws.util.Verbose.toString(securityCentralKillSession)).append("'\n");
      sb.append(" sessionTimeout='").append(com.sforce.ws.util.Verbose.toString(sessionTimeout)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
