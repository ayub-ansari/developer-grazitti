package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class VisualizationPlugin extends com.sforce.soap.metadata.Metadata {

    /**
     * Constructor
     */
    public VisualizationPlugin() {}

    /**
     * element : description of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo description__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","description","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean description__is_set = false;

    private java.lang.String description;

    public java.lang.String getDescription() {
      return description;
    }

    public void setDescription(java.lang.String description) {
      this.description = description;
      description__is_set = true;
    }

    protected void setDescription(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, description__typeInfo)) {
        setDescription(__typeMapper.readString(__in, description__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : developerName of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo developerName__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","developerName","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean developerName__is_set = false;

    private java.lang.String developerName;

    public java.lang.String getDeveloperName() {
      return developerName;
    }

    public void setDeveloperName(java.lang.String developerName) {
      this.developerName = developerName;
      developerName__is_set = true;
    }

    protected void setDeveloperName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, developerName__typeInfo)) {
        setDeveloperName(__typeMapper.readString(__in, developerName__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : icon of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo icon__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","icon","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean icon__is_set = false;

    private java.lang.String icon;

    public java.lang.String getIcon() {
      return icon;
    }

    public void setIcon(java.lang.String icon) {
      this.icon = icon;
      icon__is_set = true;
    }

    protected void setIcon(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, icon__typeInfo)) {
        setIcon(__typeMapper.readString(__in, icon__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : masterLabel of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo masterLabel__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","masterLabel","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean masterLabel__is_set = false;

    private java.lang.String masterLabel;

    public java.lang.String getMasterLabel() {
      return masterLabel;
    }

    public void setMasterLabel(java.lang.String masterLabel) {
      this.masterLabel = masterLabel;
      masterLabel__is_set = true;
    }

    protected void setMasterLabel(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, masterLabel__typeInfo)) {
        setMasterLabel(__typeMapper.readString(__in, masterLabel__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : visualizationResources of type {http://soap.sforce.com/2006/04/metadata}VisualizationResource
     * java type: com.sforce.soap.metadata.VisualizationResource[]
     */
    private static final com.sforce.ws.bind.TypeInfo visualizationResources__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","visualizationResources","http://soap.sforce.com/2006/04/metadata","VisualizationResource",0,-1,true);

    private boolean visualizationResources__is_set = false;

    private com.sforce.soap.metadata.VisualizationResource[] visualizationResources = new com.sforce.soap.metadata.VisualizationResource[0];

    public com.sforce.soap.metadata.VisualizationResource[] getVisualizationResources() {
      return visualizationResources;
    }

    public void setVisualizationResources(com.sforce.soap.metadata.VisualizationResource[] visualizationResources) {
      this.visualizationResources = visualizationResources;
      visualizationResources__is_set = true;
    }

    protected void setVisualizationResources(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, visualizationResources__typeInfo)) {
        setVisualizationResources((com.sforce.soap.metadata.VisualizationResource[])__typeMapper.readObject(__in, visualizationResources__typeInfo, com.sforce.soap.metadata.VisualizationResource[].class));
      }
    }

    /**
     * element : visualizationTypes of type {http://soap.sforce.com/2006/04/metadata}VisualizationType
     * java type: com.sforce.soap.metadata.VisualizationType[]
     */
    private static final com.sforce.ws.bind.TypeInfo visualizationTypes__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","visualizationTypes","http://soap.sforce.com/2006/04/metadata","VisualizationType",0,-1,true);

    private boolean visualizationTypes__is_set = false;

    private com.sforce.soap.metadata.VisualizationType[] visualizationTypes = new com.sforce.soap.metadata.VisualizationType[0];

    public com.sforce.soap.metadata.VisualizationType[] getVisualizationTypes() {
      return visualizationTypes;
    }

    public void setVisualizationTypes(com.sforce.soap.metadata.VisualizationType[] visualizationTypes) {
      this.visualizationTypes = visualizationTypes;
      visualizationTypes__is_set = true;
    }

    protected void setVisualizationTypes(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, visualizationTypes__typeInfo)) {
        setVisualizationTypes((com.sforce.soap.metadata.VisualizationType[])__typeMapper.readObject(__in, visualizationTypes__typeInfo, com.sforce.soap.metadata.VisualizationType[].class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      __typeMapper.writeXsiType(__out, "http://soap.sforce.com/2006/04/metadata", "VisualizationPlugin");
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       __typeMapper.writeString(__out, description__typeInfo, description, description__is_set);
       __typeMapper.writeString(__out, developerName__typeInfo, developerName, developerName__is_set);
       __typeMapper.writeString(__out, icon__typeInfo, icon, icon__is_set);
       __typeMapper.writeString(__out, masterLabel__typeInfo, masterLabel, masterLabel__is_set);
       __typeMapper.writeObject(__out, visualizationResources__typeInfo, visualizationResources, visualizationResources__is_set);
       __typeMapper.writeObject(__out, visualizationTypes__typeInfo, visualizationTypes, visualizationTypes__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        setDescription(__in, __typeMapper);
        setDeveloperName(__in, __typeMapper);
        setIcon(__in, __typeMapper);
        setMasterLabel(__in, __typeMapper);
        setVisualizationResources(__in, __typeMapper);
        setVisualizationTypes(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[VisualizationPlugin ");
      sb.append(super.toString());sb.append(" description='").append(com.sforce.ws.util.Verbose.toString(description)).append("'\n");
      sb.append(" developerName='").append(com.sforce.ws.util.Verbose.toString(developerName)).append("'\n");
      sb.append(" icon='").append(com.sforce.ws.util.Verbose.toString(icon)).append("'\n");
      sb.append(" masterLabel='").append(com.sforce.ws.util.Verbose.toString(masterLabel)).append("'\n");
      sb.append(" visualizationResources='").append(com.sforce.ws.util.Verbose.toString(visualizationResources)).append("'\n");
      sb.append(" visualizationTypes='").append(com.sforce.ws.util.Verbose.toString(visualizationTypes)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
