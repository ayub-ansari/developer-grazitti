package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class ConnectedAppMobileDetailConfig implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public ConnectedAppMobileDetailConfig() {}

    /**
     * element : applicationBinaryFile of type {http://www.w3.org/2001/XMLSchema}base64Binary
     * java type: byte[]
     */
    private static final com.sforce.ws.bind.TypeInfo applicationBinaryFile__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","applicationBinaryFile","http://www.w3.org/2001/XMLSchema","base64Binary",0,1,true);

    private boolean applicationBinaryFile__is_set = false;

    private byte[] applicationBinaryFile;

    public byte[] getApplicationBinaryFile() {
      return applicationBinaryFile;
    }

    public void setApplicationBinaryFile(byte[] applicationBinaryFile) {
      this.applicationBinaryFile = applicationBinaryFile;
      applicationBinaryFile__is_set = true;
    }

    protected void setApplicationBinaryFile(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, applicationBinaryFile__typeInfo)) {
        setApplicationBinaryFile((byte[])__typeMapper.readObject(__in, applicationBinaryFile__typeInfo, byte[].class));
      }
    }

    /**
     * element : applicationBinaryFileName of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo applicationBinaryFileName__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","applicationBinaryFileName","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean applicationBinaryFileName__is_set = false;

    private java.lang.String applicationBinaryFileName;

    public java.lang.String getApplicationBinaryFileName() {
      return applicationBinaryFileName;
    }

    public void setApplicationBinaryFileName(java.lang.String applicationBinaryFileName) {
      this.applicationBinaryFileName = applicationBinaryFileName;
      applicationBinaryFileName__is_set = true;
    }

    protected void setApplicationBinaryFileName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, applicationBinaryFileName__typeInfo)) {
        setApplicationBinaryFileName(__typeMapper.readString(__in, applicationBinaryFileName__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : applicationBundleIdentifier of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo applicationBundleIdentifier__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","applicationBundleIdentifier","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean applicationBundleIdentifier__is_set = false;

    private java.lang.String applicationBundleIdentifier;

    public java.lang.String getApplicationBundleIdentifier() {
      return applicationBundleIdentifier;
    }

    public void setApplicationBundleIdentifier(java.lang.String applicationBundleIdentifier) {
      this.applicationBundleIdentifier = applicationBundleIdentifier;
      applicationBundleIdentifier__is_set = true;
    }

    protected void setApplicationBundleIdentifier(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, applicationBundleIdentifier__typeInfo)) {
        setApplicationBundleIdentifier(__typeMapper.readString(__in, applicationBundleIdentifier__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : applicationFileLength of type {http://www.w3.org/2001/XMLSchema}int
     * java type: int
     */
    private static final com.sforce.ws.bind.TypeInfo applicationFileLength__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","applicationFileLength","http://www.w3.org/2001/XMLSchema","int",0,1,true);

    private boolean applicationFileLength__is_set = false;

    private int applicationFileLength;

    public int getApplicationFileLength() {
      return applicationFileLength;
    }

    public void setApplicationFileLength(int applicationFileLength) {
      this.applicationFileLength = applicationFileLength;
      applicationFileLength__is_set = true;
    }

    protected void setApplicationFileLength(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, applicationFileLength__typeInfo)) {
        setApplicationFileLength((int)__typeMapper.readInt(__in, applicationFileLength__typeInfo, int.class));
      }
    }

    /**
     * element : applicationIconFile of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo applicationIconFile__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","applicationIconFile","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean applicationIconFile__is_set = false;

    private java.lang.String applicationIconFile;

    public java.lang.String getApplicationIconFile() {
      return applicationIconFile;
    }

    public void setApplicationIconFile(java.lang.String applicationIconFile) {
      this.applicationIconFile = applicationIconFile;
      applicationIconFile__is_set = true;
    }

    protected void setApplicationIconFile(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, applicationIconFile__typeInfo)) {
        setApplicationIconFile(__typeMapper.readString(__in, applicationIconFile__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : applicationIconFileName of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo applicationIconFileName__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","applicationIconFileName","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean applicationIconFileName__is_set = false;

    private java.lang.String applicationIconFileName;

    public java.lang.String getApplicationIconFileName() {
      return applicationIconFileName;
    }

    public void setApplicationIconFileName(java.lang.String applicationIconFileName) {
      this.applicationIconFileName = applicationIconFileName;
      applicationIconFileName__is_set = true;
    }

    protected void setApplicationIconFileName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, applicationIconFileName__typeInfo)) {
        setApplicationIconFileName(__typeMapper.readString(__in, applicationIconFileName__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : applicationInstallUrl of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo applicationInstallUrl__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","applicationInstallUrl","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean applicationInstallUrl__is_set = false;

    private java.lang.String applicationInstallUrl;

    public java.lang.String getApplicationInstallUrl() {
      return applicationInstallUrl;
    }

    public void setApplicationInstallUrl(java.lang.String applicationInstallUrl) {
      this.applicationInstallUrl = applicationInstallUrl;
      applicationInstallUrl__is_set = true;
    }

    protected void setApplicationInstallUrl(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, applicationInstallUrl__typeInfo)) {
        setApplicationInstallUrl(__typeMapper.readString(__in, applicationInstallUrl__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : devicePlatform of type {http://soap.sforce.com/2006/04/metadata}DevicePlatformType
     * java type: com.sforce.soap.metadata.DevicePlatformType
     */
    private static final com.sforce.ws.bind.TypeInfo devicePlatform__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","devicePlatform","http://soap.sforce.com/2006/04/metadata","DevicePlatformType",1,1,true);

    private boolean devicePlatform__is_set = false;

    private com.sforce.soap.metadata.DevicePlatformType devicePlatform;

    public com.sforce.soap.metadata.DevicePlatformType getDevicePlatform() {
      return devicePlatform;
    }

    public void setDevicePlatform(com.sforce.soap.metadata.DevicePlatformType devicePlatform) {
      this.devicePlatform = devicePlatform;
      devicePlatform__is_set = true;
    }

    protected void setDevicePlatform(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, devicePlatform__typeInfo)) {
        setDevicePlatform((com.sforce.soap.metadata.DevicePlatformType)__typeMapper.readObject(__in, devicePlatform__typeInfo, com.sforce.soap.metadata.DevicePlatformType.class));
      }
    }

    /**
     * element : deviceType of type {http://soap.sforce.com/2006/04/metadata}DeviceType
     * java type: com.sforce.soap.metadata.DeviceType
     */
    private static final com.sforce.ws.bind.TypeInfo deviceType__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","deviceType","http://soap.sforce.com/2006/04/metadata","DeviceType",0,1,true);

    private boolean deviceType__is_set = false;

    private com.sforce.soap.metadata.DeviceType deviceType;

    public com.sforce.soap.metadata.DeviceType getDeviceType() {
      return deviceType;
    }

    public void setDeviceType(com.sforce.soap.metadata.DeviceType deviceType) {
      this.deviceType = deviceType;
      deviceType__is_set = true;
    }

    protected void setDeviceType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, deviceType__typeInfo)) {
        setDeviceType((com.sforce.soap.metadata.DeviceType)__typeMapper.readObject(__in, deviceType__typeInfo, com.sforce.soap.metadata.DeviceType.class));
      }
    }

    /**
     * element : minimumOsVersion of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo minimumOsVersion__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","minimumOsVersion","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean minimumOsVersion__is_set = false;

    private java.lang.String minimumOsVersion;

    public java.lang.String getMinimumOsVersion() {
      return minimumOsVersion;
    }

    public void setMinimumOsVersion(java.lang.String minimumOsVersion) {
      this.minimumOsVersion = minimumOsVersion;
      minimumOsVersion__is_set = true;
    }

    protected void setMinimumOsVersion(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, minimumOsVersion__typeInfo)) {
        setMinimumOsVersion(__typeMapper.readString(__in, minimumOsVersion__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : privateApp of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo privateApp__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","privateApp","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean privateApp__is_set = false;

    private boolean privateApp;

    public boolean getPrivateApp() {
      return privateApp;
    }

    public boolean isPrivateApp() {
      return privateApp;
    }

    public void setPrivateApp(boolean privateApp) {
      this.privateApp = privateApp;
      privateApp__is_set = true;
    }

    protected void setPrivateApp(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, privateApp__typeInfo)) {
        setPrivateApp(__typeMapper.readBoolean(__in, privateApp__typeInfo, boolean.class));
      }
    }

    /**
     * element : version of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo version__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","version","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean version__is_set = false;

    private java.lang.String version;

    public java.lang.String getVersion() {
      return version;
    }

    public void setVersion(java.lang.String version) {
      this.version = version;
      version__is_set = true;
    }

    protected void setVersion(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, version__typeInfo)) {
        setVersion(__typeMapper.readString(__in, version__typeInfo, java.lang.String.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, applicationBinaryFile__typeInfo, applicationBinaryFile, applicationBinaryFile__is_set);
       __typeMapper.writeString(__out, applicationBinaryFileName__typeInfo, applicationBinaryFileName, applicationBinaryFileName__is_set);
       __typeMapper.writeString(__out, applicationBundleIdentifier__typeInfo, applicationBundleIdentifier, applicationBundleIdentifier__is_set);
       __typeMapper.writeInt(__out, applicationFileLength__typeInfo, applicationFileLength, applicationFileLength__is_set);
       __typeMapper.writeString(__out, applicationIconFile__typeInfo, applicationIconFile, applicationIconFile__is_set);
       __typeMapper.writeString(__out, applicationIconFileName__typeInfo, applicationIconFileName, applicationIconFileName__is_set);
       __typeMapper.writeString(__out, applicationInstallUrl__typeInfo, applicationInstallUrl, applicationInstallUrl__is_set);
       __typeMapper.writeObject(__out, devicePlatform__typeInfo, devicePlatform, devicePlatform__is_set);
       __typeMapper.writeObject(__out, deviceType__typeInfo, deviceType, deviceType__is_set);
       __typeMapper.writeString(__out, minimumOsVersion__typeInfo, minimumOsVersion, minimumOsVersion__is_set);
       __typeMapper.writeBoolean(__out, privateApp__typeInfo, privateApp, privateApp__is_set);
       __typeMapper.writeString(__out, version__typeInfo, version, version__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setApplicationBinaryFile(__in, __typeMapper);
        setApplicationBinaryFileName(__in, __typeMapper);
        setApplicationBundleIdentifier(__in, __typeMapper);
        setApplicationFileLength(__in, __typeMapper);
        setApplicationIconFile(__in, __typeMapper);
        setApplicationIconFileName(__in, __typeMapper);
        setApplicationInstallUrl(__in, __typeMapper);
        setDevicePlatform(__in, __typeMapper);
        setDeviceType(__in, __typeMapper);
        setMinimumOsVersion(__in, __typeMapper);
        setPrivateApp(__in, __typeMapper);
        setVersion(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[ConnectedAppMobileDetailConfig ");
      sb.append(" applicationBinaryFile='").append(com.sforce.ws.util.Verbose.toString(applicationBinaryFile)).append("'\n");
      sb.append(" applicationBinaryFileName='").append(com.sforce.ws.util.Verbose.toString(applicationBinaryFileName)).append("'\n");
      sb.append(" applicationBundleIdentifier='").append(com.sforce.ws.util.Verbose.toString(applicationBundleIdentifier)).append("'\n");
      sb.append(" applicationFileLength='").append(com.sforce.ws.util.Verbose.toString(applicationFileLength)).append("'\n");
      sb.append(" applicationIconFile='").append(com.sforce.ws.util.Verbose.toString(applicationIconFile)).append("'\n");
      sb.append(" applicationIconFileName='").append(com.sforce.ws.util.Verbose.toString(applicationIconFileName)).append("'\n");
      sb.append(" applicationInstallUrl='").append(com.sforce.ws.util.Verbose.toString(applicationInstallUrl)).append("'\n");
      sb.append(" devicePlatform='").append(com.sforce.ws.util.Verbose.toString(devicePlatform)).append("'\n");
      sb.append(" deviceType='").append(com.sforce.ws.util.Verbose.toString(deviceType)).append("'\n");
      sb.append(" minimumOsVersion='").append(com.sforce.ws.util.Verbose.toString(minimumOsVersion)).append("'\n");
      sb.append(" privateApp='").append(com.sforce.ws.util.Verbose.toString(privateApp)).append("'\n");
      sb.append(" version='").append(com.sforce.ws.util.Verbose.toString(version)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
