package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class SecuritySettings extends com.sforce.soap.metadata.Metadata {

    /**
     * Constructor
     */
    public SecuritySettings() {}

    /**
     * element : networkAccess of type {http://soap.sforce.com/2006/04/metadata}NetworkAccess
     * java type: com.sforce.soap.metadata.NetworkAccess
     */
    private static final com.sforce.ws.bind.TypeInfo networkAccess__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","networkAccess","http://soap.sforce.com/2006/04/metadata","NetworkAccess",0,1,true);

    private boolean networkAccess__is_set = false;

    private com.sforce.soap.metadata.NetworkAccess networkAccess;

    public com.sforce.soap.metadata.NetworkAccess getNetworkAccess() {
      return networkAccess;
    }

    public void setNetworkAccess(com.sforce.soap.metadata.NetworkAccess networkAccess) {
      this.networkAccess = networkAccess;
      networkAccess__is_set = true;
    }

    protected void setNetworkAccess(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, networkAccess__typeInfo)) {
        setNetworkAccess((com.sforce.soap.metadata.NetworkAccess)__typeMapper.readObject(__in, networkAccess__typeInfo, com.sforce.soap.metadata.NetworkAccess.class));
      }
    }

    /**
     * element : passwordPolicies of type {http://soap.sforce.com/2006/04/metadata}PasswordPolicies
     * java type: com.sforce.soap.metadata.PasswordPolicies
     */
    private static final com.sforce.ws.bind.TypeInfo passwordPolicies__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","passwordPolicies","http://soap.sforce.com/2006/04/metadata","PasswordPolicies",0,1,true);

    private boolean passwordPolicies__is_set = false;

    private com.sforce.soap.metadata.PasswordPolicies passwordPolicies;

    public com.sforce.soap.metadata.PasswordPolicies getPasswordPolicies() {
      return passwordPolicies;
    }

    public void setPasswordPolicies(com.sforce.soap.metadata.PasswordPolicies passwordPolicies) {
      this.passwordPolicies = passwordPolicies;
      passwordPolicies__is_set = true;
    }

    protected void setPasswordPolicies(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, passwordPolicies__typeInfo)) {
        setPasswordPolicies((com.sforce.soap.metadata.PasswordPolicies)__typeMapper.readObject(__in, passwordPolicies__typeInfo, com.sforce.soap.metadata.PasswordPolicies.class));
      }
    }

    /**
     * element : sessionSettings of type {http://soap.sforce.com/2006/04/metadata}SessionSettings
     * java type: com.sforce.soap.metadata.SessionSettings
     */
    private static final com.sforce.ws.bind.TypeInfo sessionSettings__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","sessionSettings","http://soap.sforce.com/2006/04/metadata","SessionSettings",0,1,true);

    private boolean sessionSettings__is_set = false;

    private com.sforce.soap.metadata.SessionSettings sessionSettings;

    public com.sforce.soap.metadata.SessionSettings getSessionSettings() {
      return sessionSettings;
    }

    public void setSessionSettings(com.sforce.soap.metadata.SessionSettings sessionSettings) {
      this.sessionSettings = sessionSettings;
      sessionSettings__is_set = true;
    }

    protected void setSessionSettings(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, sessionSettings__typeInfo)) {
        setSessionSettings((com.sforce.soap.metadata.SessionSettings)__typeMapper.readObject(__in, sessionSettings__typeInfo, com.sforce.soap.metadata.SessionSettings.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      __typeMapper.writeXsiType(__out, "http://soap.sforce.com/2006/04/metadata", "SecuritySettings");
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       __typeMapper.writeObject(__out, networkAccess__typeInfo, networkAccess, networkAccess__is_set);
       __typeMapper.writeObject(__out, passwordPolicies__typeInfo, passwordPolicies, passwordPolicies__is_set);
       __typeMapper.writeObject(__out, sessionSettings__typeInfo, sessionSettings, sessionSettings__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        setNetworkAccess(__in, __typeMapper);
        setPasswordPolicies(__in, __typeMapper);
        setSessionSettings(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[SecuritySettings ");
      sb.append(super.toString());sb.append(" networkAccess='").append(com.sforce.ws.util.Verbose.toString(networkAccess)).append("'\n");
      sb.append(" passwordPolicies='").append(com.sforce.ws.util.Verbose.toString(passwordPolicies)).append("'\n");
      sb.append(" sessionSettings='").append(com.sforce.ws.util.Verbose.toString(sessionSettings)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
