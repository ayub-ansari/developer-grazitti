package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class FlowWaitEvent extends com.sforce.soap.metadata.FlowElement {

    /**
     * Constructor
     */
    public FlowWaitEvent() {}

    /**
     * element : conditionLogic of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo conditionLogic__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","conditionLogic","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean conditionLogic__is_set = false;

    private java.lang.String conditionLogic;

    public java.lang.String getConditionLogic() {
      return conditionLogic;
    }

    public void setConditionLogic(java.lang.String conditionLogic) {
      this.conditionLogic = conditionLogic;
      conditionLogic__is_set = true;
    }

    protected void setConditionLogic(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, conditionLogic__typeInfo)) {
        setConditionLogic(__typeMapper.readString(__in, conditionLogic__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : conditions of type {http://soap.sforce.com/2006/04/metadata}FlowCondition
     * java type: com.sforce.soap.metadata.FlowCondition[]
     */
    private static final com.sforce.ws.bind.TypeInfo conditions__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","conditions","http://soap.sforce.com/2006/04/metadata","FlowCondition",0,-1,true);

    private boolean conditions__is_set = false;

    private com.sforce.soap.metadata.FlowCondition[] conditions = new com.sforce.soap.metadata.FlowCondition[0];

    public com.sforce.soap.metadata.FlowCondition[] getConditions() {
      return conditions;
    }

    public void setConditions(com.sforce.soap.metadata.FlowCondition[] conditions) {
      this.conditions = conditions;
      conditions__is_set = true;
    }

    protected void setConditions(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, conditions__typeInfo)) {
        setConditions((com.sforce.soap.metadata.FlowCondition[])__typeMapper.readObject(__in, conditions__typeInfo, com.sforce.soap.metadata.FlowCondition[].class));
      }
    }

    /**
     * element : connector of type {http://soap.sforce.com/2006/04/metadata}FlowConnector
     * java type: com.sforce.soap.metadata.FlowConnector
     */
    private static final com.sforce.ws.bind.TypeInfo connector__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","connector","http://soap.sforce.com/2006/04/metadata","FlowConnector",1,1,true);

    private boolean connector__is_set = false;

    private com.sforce.soap.metadata.FlowConnector connector;

    public com.sforce.soap.metadata.FlowConnector getConnector() {
      return connector;
    }

    public void setConnector(com.sforce.soap.metadata.FlowConnector connector) {
      this.connector = connector;
      connector__is_set = true;
    }

    protected void setConnector(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, connector__typeInfo)) {
        setConnector((com.sforce.soap.metadata.FlowConnector)__typeMapper.readObject(__in, connector__typeInfo, com.sforce.soap.metadata.FlowConnector.class));
      }
    }

    /**
     * element : eventType of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo eventType__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","eventType","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean eventType__is_set = false;

    private java.lang.String eventType;

    public java.lang.String getEventType() {
      return eventType;
    }

    public void setEventType(java.lang.String eventType) {
      this.eventType = eventType;
      eventType__is_set = true;
    }

    protected void setEventType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, eventType__typeInfo)) {
        setEventType(__typeMapper.readString(__in, eventType__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : inputParameters of type {http://soap.sforce.com/2006/04/metadata}FlowWaitEventInputParameter
     * java type: com.sforce.soap.metadata.FlowWaitEventInputParameter[]
     */
    private static final com.sforce.ws.bind.TypeInfo inputParameters__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","inputParameters","http://soap.sforce.com/2006/04/metadata","FlowWaitEventInputParameter",0,-1,true);

    private boolean inputParameters__is_set = false;

    private com.sforce.soap.metadata.FlowWaitEventInputParameter[] inputParameters = new com.sforce.soap.metadata.FlowWaitEventInputParameter[0];

    public com.sforce.soap.metadata.FlowWaitEventInputParameter[] getInputParameters() {
      return inputParameters;
    }

    public void setInputParameters(com.sforce.soap.metadata.FlowWaitEventInputParameter[] inputParameters) {
      this.inputParameters = inputParameters;
      inputParameters__is_set = true;
    }

    protected void setInputParameters(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, inputParameters__typeInfo)) {
        setInputParameters((com.sforce.soap.metadata.FlowWaitEventInputParameter[])__typeMapper.readObject(__in, inputParameters__typeInfo, com.sforce.soap.metadata.FlowWaitEventInputParameter[].class));
      }
    }

    /**
     * element : label of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo label__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","label","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean label__is_set = false;

    private java.lang.String label;

    public java.lang.String getLabel() {
      return label;
    }

    public void setLabel(java.lang.String label) {
      this.label = label;
      label__is_set = true;
    }

    protected void setLabel(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, label__typeInfo)) {
        setLabel(__typeMapper.readString(__in, label__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : outputParameters of type {http://soap.sforce.com/2006/04/metadata}FlowWaitEventOutputParameter
     * java type: com.sforce.soap.metadata.FlowWaitEventOutputParameter[]
     */
    private static final com.sforce.ws.bind.TypeInfo outputParameters__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","outputParameters","http://soap.sforce.com/2006/04/metadata","FlowWaitEventOutputParameter",0,-1,true);

    private boolean outputParameters__is_set = false;

    private com.sforce.soap.metadata.FlowWaitEventOutputParameter[] outputParameters = new com.sforce.soap.metadata.FlowWaitEventOutputParameter[0];

    public com.sforce.soap.metadata.FlowWaitEventOutputParameter[] getOutputParameters() {
      return outputParameters;
    }

    public void setOutputParameters(com.sforce.soap.metadata.FlowWaitEventOutputParameter[] outputParameters) {
      this.outputParameters = outputParameters;
      outputParameters__is_set = true;
    }

    protected void setOutputParameters(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, outputParameters__typeInfo)) {
        setOutputParameters((com.sforce.soap.metadata.FlowWaitEventOutputParameter[])__typeMapper.readObject(__in, outputParameters__typeInfo, com.sforce.soap.metadata.FlowWaitEventOutputParameter[].class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      __typeMapper.writeXsiType(__out, "http://soap.sforce.com/2006/04/metadata", "FlowWaitEvent");
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       __typeMapper.writeString(__out, conditionLogic__typeInfo, conditionLogic, conditionLogic__is_set);
       __typeMapper.writeObject(__out, conditions__typeInfo, conditions, conditions__is_set);
       __typeMapper.writeObject(__out, connector__typeInfo, connector, connector__is_set);
       __typeMapper.writeString(__out, eventType__typeInfo, eventType, eventType__is_set);
       __typeMapper.writeObject(__out, inputParameters__typeInfo, inputParameters, inputParameters__is_set);
       __typeMapper.writeString(__out, label__typeInfo, label, label__is_set);
       __typeMapper.writeObject(__out, outputParameters__typeInfo, outputParameters, outputParameters__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        setConditionLogic(__in, __typeMapper);
        setConditions(__in, __typeMapper);
        setConnector(__in, __typeMapper);
        setEventType(__in, __typeMapper);
        setInputParameters(__in, __typeMapper);
        setLabel(__in, __typeMapper);
        setOutputParameters(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[FlowWaitEvent ");
      sb.append(super.toString());sb.append(" conditionLogic='").append(com.sforce.ws.util.Verbose.toString(conditionLogic)).append("'\n");
      sb.append(" conditions='").append(com.sforce.ws.util.Verbose.toString(conditions)).append("'\n");
      sb.append(" connector='").append(com.sforce.ws.util.Verbose.toString(connector)).append("'\n");
      sb.append(" eventType='").append(com.sforce.ws.util.Verbose.toString(eventType)).append("'\n");
      sb.append(" inputParameters='").append(com.sforce.ws.util.Verbose.toString(inputParameters)).append("'\n");
      sb.append(" label='").append(com.sforce.ws.util.Verbose.toString(label)).append("'\n");
      sb.append(" outputParameters='").append(com.sforce.ws.util.Verbose.toString(outputParameters)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
