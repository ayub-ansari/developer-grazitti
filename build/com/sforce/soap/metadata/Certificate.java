package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class Certificate extends com.sforce.soap.metadata.MetadataWithContent {

    /**
     * Constructor
     */
    public Certificate() {}

    /**
     * element : caSigned of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo caSigned__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","caSigned","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);

    private boolean caSigned__is_set = false;

    private boolean caSigned;

    public boolean getCaSigned() {
      return caSigned;
    }

    public boolean isCaSigned() {
      return caSigned;
    }

    public void setCaSigned(boolean caSigned) {
      this.caSigned = caSigned;
      caSigned__is_set = true;
    }

    protected void setCaSigned(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, caSigned__typeInfo)) {
        setCaSigned(__typeMapper.readBoolean(__in, caSigned__typeInfo, boolean.class));
      }
    }

    /**
     * element : keySize of type {http://www.w3.org/2001/XMLSchema}int
     * java type: int
     */
    private static final com.sforce.ws.bind.TypeInfo keySize__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","keySize","http://www.w3.org/2001/XMLSchema","int",0,1,true);

    private boolean keySize__is_set = false;

    private int keySize;

    public int getKeySize() {
      return keySize;
    }

    public void setKeySize(int keySize) {
      this.keySize = keySize;
      keySize__is_set = true;
    }

    protected void setKeySize(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, keySize__typeInfo)) {
        setKeySize((int)__typeMapper.readInt(__in, keySize__typeInfo, int.class));
      }
    }

    /**
     * element : masterLabel of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo masterLabel__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","masterLabel","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean masterLabel__is_set = false;

    private java.lang.String masterLabel;

    public java.lang.String getMasterLabel() {
      return masterLabel;
    }

    public void setMasterLabel(java.lang.String masterLabel) {
      this.masterLabel = masterLabel;
      masterLabel__is_set = true;
    }

    protected void setMasterLabel(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, masterLabel__typeInfo)) {
        setMasterLabel(__typeMapper.readString(__in, masterLabel__typeInfo, java.lang.String.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      __typeMapper.writeXsiType(__out, "http://soap.sforce.com/2006/04/metadata", "Certificate");
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       __typeMapper.writeBoolean(__out, caSigned__typeInfo, caSigned, caSigned__is_set);
       __typeMapper.writeInt(__out, keySize__typeInfo, keySize, keySize__is_set);
       __typeMapper.writeString(__out, masterLabel__typeInfo, masterLabel, masterLabel__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        setCaSigned(__in, __typeMapper);
        setKeySize(__in, __typeMapper);
        setMasterLabel(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[Certificate ");
      sb.append(super.toString());sb.append(" caSigned='").append(com.sforce.ws.util.Verbose.toString(caSigned)).append("'\n");
      sb.append(" keySize='").append(com.sforce.ws.util.Verbose.toString(keySize)).append("'\n");
      sb.append(" masterLabel='").append(com.sforce.ws.util.Verbose.toString(masterLabel)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
