package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class SynonymGroup implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public SynonymGroup() {}

    /**
     * element : languages of type {http://soap.sforce.com/2006/04/metadata}Language
     * java type: com.sforce.soap.metadata.Language[]
     */
    private static final com.sforce.ws.bind.TypeInfo languages__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","languages","http://soap.sforce.com/2006/04/metadata","Language",0,-1,true);

    private boolean languages__is_set = false;

    private com.sforce.soap.metadata.Language[] languages = new com.sforce.soap.metadata.Language[0];

    public com.sforce.soap.metadata.Language[] getLanguages() {
      return languages;
    }

    public void setLanguages(com.sforce.soap.metadata.Language[] languages) {
      this.languages = languages;
      languages__is_set = true;
    }

    protected void setLanguages(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, languages__typeInfo)) {
        setLanguages((com.sforce.soap.metadata.Language[])__typeMapper.readObject(__in, languages__typeInfo, com.sforce.soap.metadata.Language[].class));
      }
    }

    /**
     * element : terms of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String[]
     */
    private static final com.sforce.ws.bind.TypeInfo terms__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","terms","http://www.w3.org/2001/XMLSchema","string",0,-1,true);

    private boolean terms__is_set = false;

    private java.lang.String[] terms = new java.lang.String[0];

    public java.lang.String[] getTerms() {
      return terms;
    }

    public void setTerms(java.lang.String[] terms) {
      this.terms = terms;
      terms__is_set = true;
    }

    protected void setTerms(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, terms__typeInfo)) {
        setTerms((java.lang.String[])__typeMapper.readObject(__in, terms__typeInfo, java.lang.String[].class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, languages__typeInfo, languages, languages__is_set);
       __typeMapper.writeObject(__out, terms__typeInfo, terms, terms__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setLanguages(__in, __typeMapper);
        setTerms(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[SynonymGroup ");
      sb.append(" languages='").append(com.sforce.ws.util.Verbose.toString(languages)).append("'\n");
      sb.append(" terms='").append(com.sforce.ws.util.Verbose.toString(terms)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
