package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class Territory2RuleAssociation implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public Territory2RuleAssociation() {}

    /**
     * element : inherited of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo inherited__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","inherited","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);

    private boolean inherited__is_set = false;

    private boolean inherited;

    public boolean getInherited() {
      return inherited;
    }

    public boolean isInherited() {
      return inherited;
    }

    public void setInherited(boolean inherited) {
      this.inherited = inherited;
      inherited__is_set = true;
    }

    protected void setInherited(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, inherited__typeInfo)) {
        setInherited(__typeMapper.readBoolean(__in, inherited__typeInfo, boolean.class));
      }
    }

    /**
     * element : ruleName of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo ruleName__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","ruleName","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean ruleName__is_set = false;

    private java.lang.String ruleName;

    public java.lang.String getRuleName() {
      return ruleName;
    }

    public void setRuleName(java.lang.String ruleName) {
      this.ruleName = ruleName;
      ruleName__is_set = true;
    }

    protected void setRuleName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, ruleName__typeInfo)) {
        setRuleName(__typeMapper.readString(__in, ruleName__typeInfo, java.lang.String.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeBoolean(__out, inherited__typeInfo, inherited, inherited__is_set);
       __typeMapper.writeString(__out, ruleName__typeInfo, ruleName, ruleName__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setInherited(__in, __typeMapper);
        setRuleName(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[Territory2RuleAssociation ");
      sb.append(" inherited='").append(com.sforce.ws.util.Verbose.toString(inherited)).append("'\n");
      sb.append(" ruleName='").append(com.sforce.ws.util.Verbose.toString(ruleName)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
