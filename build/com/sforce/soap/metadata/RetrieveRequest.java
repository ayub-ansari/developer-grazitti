package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class RetrieveRequest implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public RetrieveRequest() {}

    /**
     * element : apiVersion of type {http://www.w3.org/2001/XMLSchema}double
     * java type: double
     */
    private static final com.sforce.ws.bind.TypeInfo apiVersion__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","apiVersion","http://www.w3.org/2001/XMLSchema","double",1,1,true);

    private boolean apiVersion__is_set = false;

    private double apiVersion;

    public double getApiVersion() {
      return apiVersion;
    }

    public void setApiVersion(double apiVersion) {
      this.apiVersion = apiVersion;
      apiVersion__is_set = true;
    }

    protected void setApiVersion(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, apiVersion__typeInfo)) {
        setApiVersion((double)__typeMapper.readDouble(__in, apiVersion__typeInfo, double.class));
      }
    }

    /**
     * element : packageNames of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String[]
     */
    private static final com.sforce.ws.bind.TypeInfo packageNames__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","packageNames","http://www.w3.org/2001/XMLSchema","string",0,-1,true);

    private boolean packageNames__is_set = false;

    private java.lang.String[] packageNames = new java.lang.String[0];

    public java.lang.String[] getPackageNames() {
      return packageNames;
    }

    public void setPackageNames(java.lang.String[] packageNames) {
      this.packageNames = packageNames;
      packageNames__is_set = true;
    }

    protected void setPackageNames(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, packageNames__typeInfo)) {
        setPackageNames((java.lang.String[])__typeMapper.readObject(__in, packageNames__typeInfo, java.lang.String[].class));
      }
    }

    /**
     * element : singlePackage of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo singlePackage__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","singlePackage","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);

    private boolean singlePackage__is_set = false;

    private boolean singlePackage;

    public boolean getSinglePackage() {
      return singlePackage;
    }

    public boolean isSinglePackage() {
      return singlePackage;
    }

    public void setSinglePackage(boolean singlePackage) {
      this.singlePackage = singlePackage;
      singlePackage__is_set = true;
    }

    protected void setSinglePackage(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, singlePackage__typeInfo)) {
        setSinglePackage(__typeMapper.readBoolean(__in, singlePackage__typeInfo, boolean.class));
      }
    }

    /**
     * element : specificFiles of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String[]
     */
    private static final com.sforce.ws.bind.TypeInfo specificFiles__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","specificFiles","http://www.w3.org/2001/XMLSchema","string",0,-1,true);

    private boolean specificFiles__is_set = false;

    private java.lang.String[] specificFiles = new java.lang.String[0];

    public java.lang.String[] getSpecificFiles() {
      return specificFiles;
    }

    public void setSpecificFiles(java.lang.String[] specificFiles) {
      this.specificFiles = specificFiles;
      specificFiles__is_set = true;
    }

    protected void setSpecificFiles(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, specificFiles__typeInfo)) {
        setSpecificFiles((java.lang.String[])__typeMapper.readObject(__in, specificFiles__typeInfo, java.lang.String[].class));
      }
    }

    /**
     * element : unpackaged of type {http://soap.sforce.com/2006/04/metadata}Package
     * java type: com.sforce.soap.metadata.Package
     */
    private static final com.sforce.ws.bind.TypeInfo unpackaged__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","unpackaged","http://soap.sforce.com/2006/04/metadata","Package",0,1,true);

    private boolean unpackaged__is_set = false;

    private com.sforce.soap.metadata.Package unpackaged;

    public com.sforce.soap.metadata.Package getUnpackaged() {
      return unpackaged;
    }

    public void setUnpackaged(com.sforce.soap.metadata.Package unpackaged) {
      this.unpackaged = unpackaged;
      unpackaged__is_set = true;
    }

    protected void setUnpackaged(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, unpackaged__typeInfo)) {
        setUnpackaged((com.sforce.soap.metadata.Package)__typeMapper.readObject(__in, unpackaged__typeInfo, com.sforce.soap.metadata.Package.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeDouble(__out, apiVersion__typeInfo, apiVersion, apiVersion__is_set);
       __typeMapper.writeObject(__out, packageNames__typeInfo, packageNames, packageNames__is_set);
       __typeMapper.writeBoolean(__out, singlePackage__typeInfo, singlePackage, singlePackage__is_set);
       __typeMapper.writeObject(__out, specificFiles__typeInfo, specificFiles, specificFiles__is_set);
       __typeMapper.writeObject(__out, unpackaged__typeInfo, unpackaged, unpackaged__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setApiVersion(__in, __typeMapper);
        setPackageNames(__in, __typeMapper);
        setSinglePackage(__in, __typeMapper);
        setSpecificFiles(__in, __typeMapper);
        setUnpackaged(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[RetrieveRequest ");
      sb.append(" apiVersion='").append(com.sforce.ws.util.Verbose.toString(apiVersion)).append("'\n");
      sb.append(" packageNames='").append(com.sforce.ws.util.Verbose.toString(packageNames)).append("'\n");
      sb.append(" singlePackage='").append(com.sforce.ws.util.Verbose.toString(singlePackage)).append("'\n");
      sb.append(" specificFiles='").append(com.sforce.ws.util.Verbose.toString(specificFiles)).append("'\n");
      sb.append(" unpackaged='").append(com.sforce.ws.util.Verbose.toString(unpackaged)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
