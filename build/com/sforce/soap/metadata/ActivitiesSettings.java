package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class ActivitiesSettings extends com.sforce.soap.metadata.Metadata {

    /**
     * Constructor
     */
    public ActivitiesSettings() {}

    /**
     * element : allowUsersToRelateMultipleContactsToTasksAndEvents of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo allowUsersToRelateMultipleContactsToTasksAndEvents__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","allowUsersToRelateMultipleContactsToTasksAndEvents","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean allowUsersToRelateMultipleContactsToTasksAndEvents__is_set = false;

    private boolean allowUsersToRelateMultipleContactsToTasksAndEvents;

    public boolean getAllowUsersToRelateMultipleContactsToTasksAndEvents() {
      return allowUsersToRelateMultipleContactsToTasksAndEvents;
    }

    public boolean isAllowUsersToRelateMultipleContactsToTasksAndEvents() {
      return allowUsersToRelateMultipleContactsToTasksAndEvents;
    }

    public void setAllowUsersToRelateMultipleContactsToTasksAndEvents(boolean allowUsersToRelateMultipleContactsToTasksAndEvents) {
      this.allowUsersToRelateMultipleContactsToTasksAndEvents = allowUsersToRelateMultipleContactsToTasksAndEvents;
      allowUsersToRelateMultipleContactsToTasksAndEvents__is_set = true;
    }

    protected void setAllowUsersToRelateMultipleContactsToTasksAndEvents(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, allowUsersToRelateMultipleContactsToTasksAndEvents__typeInfo)) {
        setAllowUsersToRelateMultipleContactsToTasksAndEvents(__typeMapper.readBoolean(__in, allowUsersToRelateMultipleContactsToTasksAndEvents__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableActivityReminders of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableActivityReminders__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableActivityReminders","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableActivityReminders__is_set = false;

    private boolean enableActivityReminders;

    public boolean getEnableActivityReminders() {
      return enableActivityReminders;
    }

    public boolean isEnableActivityReminders() {
      return enableActivityReminders;
    }

    public void setEnableActivityReminders(boolean enableActivityReminders) {
      this.enableActivityReminders = enableActivityReminders;
      enableActivityReminders__is_set = true;
    }

    protected void setEnableActivityReminders(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableActivityReminders__typeInfo)) {
        setEnableActivityReminders(__typeMapper.readBoolean(__in, enableActivityReminders__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableClickCreateEvents of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableClickCreateEvents__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableClickCreateEvents","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableClickCreateEvents__is_set = false;

    private boolean enableClickCreateEvents;

    public boolean getEnableClickCreateEvents() {
      return enableClickCreateEvents;
    }

    public boolean isEnableClickCreateEvents() {
      return enableClickCreateEvents;
    }

    public void setEnableClickCreateEvents(boolean enableClickCreateEvents) {
      this.enableClickCreateEvents = enableClickCreateEvents;
      enableClickCreateEvents__is_set = true;
    }

    protected void setEnableClickCreateEvents(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableClickCreateEvents__typeInfo)) {
        setEnableClickCreateEvents(__typeMapper.readBoolean(__in, enableClickCreateEvents__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableDragAndDropScheduling of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableDragAndDropScheduling__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableDragAndDropScheduling","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableDragAndDropScheduling__is_set = false;

    private boolean enableDragAndDropScheduling;

    public boolean getEnableDragAndDropScheduling() {
      return enableDragAndDropScheduling;
    }

    public boolean isEnableDragAndDropScheduling() {
      return enableDragAndDropScheduling;
    }

    public void setEnableDragAndDropScheduling(boolean enableDragAndDropScheduling) {
      this.enableDragAndDropScheduling = enableDragAndDropScheduling;
      enableDragAndDropScheduling__is_set = true;
    }

    protected void setEnableDragAndDropScheduling(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableDragAndDropScheduling__typeInfo)) {
        setEnableDragAndDropScheduling(__typeMapper.readBoolean(__in, enableDragAndDropScheduling__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableEmailTracking of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableEmailTracking__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableEmailTracking","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableEmailTracking__is_set = false;

    private boolean enableEmailTracking;

    public boolean getEnableEmailTracking() {
      return enableEmailTracking;
    }

    public boolean isEnableEmailTracking() {
      return enableEmailTracking;
    }

    public void setEnableEmailTracking(boolean enableEmailTracking) {
      this.enableEmailTracking = enableEmailTracking;
      enableEmailTracking__is_set = true;
    }

    protected void setEnableEmailTracking(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableEmailTracking__typeInfo)) {
        setEnableEmailTracking(__typeMapper.readBoolean(__in, enableEmailTracking__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableGroupTasks of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableGroupTasks__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableGroupTasks","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableGroupTasks__is_set = false;

    private boolean enableGroupTasks;

    public boolean getEnableGroupTasks() {
      return enableGroupTasks;
    }

    public boolean isEnableGroupTasks() {
      return enableGroupTasks;
    }

    public void setEnableGroupTasks(boolean enableGroupTasks) {
      this.enableGroupTasks = enableGroupTasks;
      enableGroupTasks__is_set = true;
    }

    protected void setEnableGroupTasks(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableGroupTasks__typeInfo)) {
        setEnableGroupTasks(__typeMapper.readBoolean(__in, enableGroupTasks__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableListViewScheduling of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableListViewScheduling__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableListViewScheduling","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableListViewScheduling__is_set = false;

    private boolean enableListViewScheduling;

    public boolean getEnableListViewScheduling() {
      return enableListViewScheduling;
    }

    public boolean isEnableListViewScheduling() {
      return enableListViewScheduling;
    }

    public void setEnableListViewScheduling(boolean enableListViewScheduling) {
      this.enableListViewScheduling = enableListViewScheduling;
      enableListViewScheduling__is_set = true;
    }

    protected void setEnableListViewScheduling(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableListViewScheduling__typeInfo)) {
        setEnableListViewScheduling(__typeMapper.readBoolean(__in, enableListViewScheduling__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableLogNote of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableLogNote__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableLogNote","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableLogNote__is_set = false;

    private boolean enableLogNote;

    public boolean getEnableLogNote() {
      return enableLogNote;
    }

    public boolean isEnableLogNote() {
      return enableLogNote;
    }

    public void setEnableLogNote(boolean enableLogNote) {
      this.enableLogNote = enableLogNote;
      enableLogNote__is_set = true;
    }

    protected void setEnableLogNote(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableLogNote__typeInfo)) {
        setEnableLogNote(__typeMapper.readBoolean(__in, enableLogNote__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableMultidayEvents of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableMultidayEvents__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableMultidayEvents","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableMultidayEvents__is_set = false;

    private boolean enableMultidayEvents;

    public boolean getEnableMultidayEvents() {
      return enableMultidayEvents;
    }

    public boolean isEnableMultidayEvents() {
      return enableMultidayEvents;
    }

    public void setEnableMultidayEvents(boolean enableMultidayEvents) {
      this.enableMultidayEvents = enableMultidayEvents;
      enableMultidayEvents__is_set = true;
    }

    protected void setEnableMultidayEvents(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableMultidayEvents__typeInfo)) {
        setEnableMultidayEvents(__typeMapper.readBoolean(__in, enableMultidayEvents__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableRecurringEvents of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableRecurringEvents__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableRecurringEvents","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableRecurringEvents__is_set = false;

    private boolean enableRecurringEvents;

    public boolean getEnableRecurringEvents() {
      return enableRecurringEvents;
    }

    public boolean isEnableRecurringEvents() {
      return enableRecurringEvents;
    }

    public void setEnableRecurringEvents(boolean enableRecurringEvents) {
      this.enableRecurringEvents = enableRecurringEvents;
      enableRecurringEvents__is_set = true;
    }

    protected void setEnableRecurringEvents(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableRecurringEvents__typeInfo)) {
        setEnableRecurringEvents(__typeMapper.readBoolean(__in, enableRecurringEvents__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableRecurringTasks of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableRecurringTasks__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableRecurringTasks","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableRecurringTasks__is_set = false;

    private boolean enableRecurringTasks;

    public boolean getEnableRecurringTasks() {
      return enableRecurringTasks;
    }

    public boolean isEnableRecurringTasks() {
      return enableRecurringTasks;
    }

    public void setEnableRecurringTasks(boolean enableRecurringTasks) {
      this.enableRecurringTasks = enableRecurringTasks;
      enableRecurringTasks__is_set = true;
    }

    protected void setEnableRecurringTasks(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableRecurringTasks__typeInfo)) {
        setEnableRecurringTasks(__typeMapper.readBoolean(__in, enableRecurringTasks__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableSidebarCalendarShortcut of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableSidebarCalendarShortcut__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableSidebarCalendarShortcut","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableSidebarCalendarShortcut__is_set = false;

    private boolean enableSidebarCalendarShortcut;

    public boolean getEnableSidebarCalendarShortcut() {
      return enableSidebarCalendarShortcut;
    }

    public boolean isEnableSidebarCalendarShortcut() {
      return enableSidebarCalendarShortcut;
    }

    public void setEnableSidebarCalendarShortcut(boolean enableSidebarCalendarShortcut) {
      this.enableSidebarCalendarShortcut = enableSidebarCalendarShortcut;
      enableSidebarCalendarShortcut__is_set = true;
    }

    protected void setEnableSidebarCalendarShortcut(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableSidebarCalendarShortcut__typeInfo)) {
        setEnableSidebarCalendarShortcut(__typeMapper.readBoolean(__in, enableSidebarCalendarShortcut__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableSimpleTaskCreateUI of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableSimpleTaskCreateUI__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableSimpleTaskCreateUI","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableSimpleTaskCreateUI__is_set = false;

    private boolean enableSimpleTaskCreateUI;

    public boolean getEnableSimpleTaskCreateUI() {
      return enableSimpleTaskCreateUI;
    }

    public boolean isEnableSimpleTaskCreateUI() {
      return enableSimpleTaskCreateUI;
    }

    public void setEnableSimpleTaskCreateUI(boolean enableSimpleTaskCreateUI) {
      this.enableSimpleTaskCreateUI = enableSimpleTaskCreateUI;
      enableSimpleTaskCreateUI__is_set = true;
    }

    protected void setEnableSimpleTaskCreateUI(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableSimpleTaskCreateUI__typeInfo)) {
        setEnableSimpleTaskCreateUI(__typeMapper.readBoolean(__in, enableSimpleTaskCreateUI__typeInfo, boolean.class));
      }
    }

    /**
     * element : enableUNSTaskDelegatedToNotifications of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo enableUNSTaskDelegatedToNotifications__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","enableUNSTaskDelegatedToNotifications","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean enableUNSTaskDelegatedToNotifications__is_set = false;

    private boolean enableUNSTaskDelegatedToNotifications;

    public boolean getEnableUNSTaskDelegatedToNotifications() {
      return enableUNSTaskDelegatedToNotifications;
    }

    public boolean isEnableUNSTaskDelegatedToNotifications() {
      return enableUNSTaskDelegatedToNotifications;
    }

    public void setEnableUNSTaskDelegatedToNotifications(boolean enableUNSTaskDelegatedToNotifications) {
      this.enableUNSTaskDelegatedToNotifications = enableUNSTaskDelegatedToNotifications;
      enableUNSTaskDelegatedToNotifications__is_set = true;
    }

    protected void setEnableUNSTaskDelegatedToNotifications(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, enableUNSTaskDelegatedToNotifications__typeInfo)) {
        setEnableUNSTaskDelegatedToNotifications(__typeMapper.readBoolean(__in, enableUNSTaskDelegatedToNotifications__typeInfo, boolean.class));
      }
    }

    /**
     * element : meetingRequestsLogo of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo meetingRequestsLogo__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","meetingRequestsLogo","http://www.w3.org/2001/XMLSchema","string",0,1,true);

    private boolean meetingRequestsLogo__is_set = false;

    private java.lang.String meetingRequestsLogo;

    public java.lang.String getMeetingRequestsLogo() {
      return meetingRequestsLogo;
    }

    public void setMeetingRequestsLogo(java.lang.String meetingRequestsLogo) {
      this.meetingRequestsLogo = meetingRequestsLogo;
      meetingRequestsLogo__is_set = true;
    }

    protected void setMeetingRequestsLogo(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, meetingRequestsLogo__typeInfo)) {
        setMeetingRequestsLogo(__typeMapper.readString(__in, meetingRequestsLogo__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : showCustomLogoMeetingRequests of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo showCustomLogoMeetingRequests__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","showCustomLogoMeetingRequests","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean showCustomLogoMeetingRequests__is_set = false;

    private boolean showCustomLogoMeetingRequests;

    public boolean getShowCustomLogoMeetingRequests() {
      return showCustomLogoMeetingRequests;
    }

    public boolean isShowCustomLogoMeetingRequests() {
      return showCustomLogoMeetingRequests;
    }

    public void setShowCustomLogoMeetingRequests(boolean showCustomLogoMeetingRequests) {
      this.showCustomLogoMeetingRequests = showCustomLogoMeetingRequests;
      showCustomLogoMeetingRequests__is_set = true;
    }

    protected void setShowCustomLogoMeetingRequests(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, showCustomLogoMeetingRequests__typeInfo)) {
        setShowCustomLogoMeetingRequests(__typeMapper.readBoolean(__in, showCustomLogoMeetingRequests__typeInfo, boolean.class));
      }
    }

    /**
     * element : showEventDetailsMultiUserCalendar of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo showEventDetailsMultiUserCalendar__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","showEventDetailsMultiUserCalendar","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean showEventDetailsMultiUserCalendar__is_set = false;

    private boolean showEventDetailsMultiUserCalendar;

    public boolean getShowEventDetailsMultiUserCalendar() {
      return showEventDetailsMultiUserCalendar;
    }

    public boolean isShowEventDetailsMultiUserCalendar() {
      return showEventDetailsMultiUserCalendar;
    }

    public void setShowEventDetailsMultiUserCalendar(boolean showEventDetailsMultiUserCalendar) {
      this.showEventDetailsMultiUserCalendar = showEventDetailsMultiUserCalendar;
      showEventDetailsMultiUserCalendar__is_set = true;
    }

    protected void setShowEventDetailsMultiUserCalendar(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, showEventDetailsMultiUserCalendar__typeInfo)) {
        setShowEventDetailsMultiUserCalendar(__typeMapper.readBoolean(__in, showEventDetailsMultiUserCalendar__typeInfo, boolean.class));
      }
    }

    /**
     * element : showHomePageHoverLinksForEvents of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo showHomePageHoverLinksForEvents__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","showHomePageHoverLinksForEvents","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean showHomePageHoverLinksForEvents__is_set = false;

    private boolean showHomePageHoverLinksForEvents;

    public boolean getShowHomePageHoverLinksForEvents() {
      return showHomePageHoverLinksForEvents;
    }

    public boolean isShowHomePageHoverLinksForEvents() {
      return showHomePageHoverLinksForEvents;
    }

    public void setShowHomePageHoverLinksForEvents(boolean showHomePageHoverLinksForEvents) {
      this.showHomePageHoverLinksForEvents = showHomePageHoverLinksForEvents;
      showHomePageHoverLinksForEvents__is_set = true;
    }

    protected void setShowHomePageHoverLinksForEvents(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, showHomePageHoverLinksForEvents__typeInfo)) {
        setShowHomePageHoverLinksForEvents(__typeMapper.readBoolean(__in, showHomePageHoverLinksForEvents__typeInfo, boolean.class));
      }
    }

    /**
     * element : showMyTasksHoverLinks of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo showMyTasksHoverLinks__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","showMyTasksHoverLinks","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean showMyTasksHoverLinks__is_set = false;

    private boolean showMyTasksHoverLinks;

    public boolean getShowMyTasksHoverLinks() {
      return showMyTasksHoverLinks;
    }

    public boolean isShowMyTasksHoverLinks() {
      return showMyTasksHoverLinks;
    }

    public void setShowMyTasksHoverLinks(boolean showMyTasksHoverLinks) {
      this.showMyTasksHoverLinks = showMyTasksHoverLinks;
      showMyTasksHoverLinks__is_set = true;
    }

    protected void setShowMyTasksHoverLinks(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, showMyTasksHoverLinks__typeInfo)) {
        setShowMyTasksHoverLinks(__typeMapper.readBoolean(__in, showMyTasksHoverLinks__typeInfo, boolean.class));
      }
    }

    /**
     * element : showRequestedMeetingsOnHomePage of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo showRequestedMeetingsOnHomePage__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","showRequestedMeetingsOnHomePage","http://www.w3.org/2001/XMLSchema","boolean",0,1,true);

    private boolean showRequestedMeetingsOnHomePage__is_set = false;

    private boolean showRequestedMeetingsOnHomePage;

    public boolean getShowRequestedMeetingsOnHomePage() {
      return showRequestedMeetingsOnHomePage;
    }

    public boolean isShowRequestedMeetingsOnHomePage() {
      return showRequestedMeetingsOnHomePage;
    }

    public void setShowRequestedMeetingsOnHomePage(boolean showRequestedMeetingsOnHomePage) {
      this.showRequestedMeetingsOnHomePage = showRequestedMeetingsOnHomePage;
      showRequestedMeetingsOnHomePage__is_set = true;
    }

    protected void setShowRequestedMeetingsOnHomePage(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, showRequestedMeetingsOnHomePage__typeInfo)) {
        setShowRequestedMeetingsOnHomePage(__typeMapper.readBoolean(__in, showRequestedMeetingsOnHomePage__typeInfo, boolean.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      __typeMapper.writeXsiType(__out, "http://soap.sforce.com/2006/04/metadata", "ActivitiesSettings");
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       __typeMapper.writeBoolean(__out, allowUsersToRelateMultipleContactsToTasksAndEvents__typeInfo, allowUsersToRelateMultipleContactsToTasksAndEvents, allowUsersToRelateMultipleContactsToTasksAndEvents__is_set);
       __typeMapper.writeBoolean(__out, enableActivityReminders__typeInfo, enableActivityReminders, enableActivityReminders__is_set);
       __typeMapper.writeBoolean(__out, enableClickCreateEvents__typeInfo, enableClickCreateEvents, enableClickCreateEvents__is_set);
       __typeMapper.writeBoolean(__out, enableDragAndDropScheduling__typeInfo, enableDragAndDropScheduling, enableDragAndDropScheduling__is_set);
       __typeMapper.writeBoolean(__out, enableEmailTracking__typeInfo, enableEmailTracking, enableEmailTracking__is_set);
       __typeMapper.writeBoolean(__out, enableGroupTasks__typeInfo, enableGroupTasks, enableGroupTasks__is_set);
       __typeMapper.writeBoolean(__out, enableListViewScheduling__typeInfo, enableListViewScheduling, enableListViewScheduling__is_set);
       __typeMapper.writeBoolean(__out, enableLogNote__typeInfo, enableLogNote, enableLogNote__is_set);
       __typeMapper.writeBoolean(__out, enableMultidayEvents__typeInfo, enableMultidayEvents, enableMultidayEvents__is_set);
       __typeMapper.writeBoolean(__out, enableRecurringEvents__typeInfo, enableRecurringEvents, enableRecurringEvents__is_set);
       __typeMapper.writeBoolean(__out, enableRecurringTasks__typeInfo, enableRecurringTasks, enableRecurringTasks__is_set);
       __typeMapper.writeBoolean(__out, enableSidebarCalendarShortcut__typeInfo, enableSidebarCalendarShortcut, enableSidebarCalendarShortcut__is_set);
       __typeMapper.writeBoolean(__out, enableSimpleTaskCreateUI__typeInfo, enableSimpleTaskCreateUI, enableSimpleTaskCreateUI__is_set);
       __typeMapper.writeBoolean(__out, enableUNSTaskDelegatedToNotifications__typeInfo, enableUNSTaskDelegatedToNotifications, enableUNSTaskDelegatedToNotifications__is_set);
       __typeMapper.writeString(__out, meetingRequestsLogo__typeInfo, meetingRequestsLogo, meetingRequestsLogo__is_set);
       __typeMapper.writeBoolean(__out, showCustomLogoMeetingRequests__typeInfo, showCustomLogoMeetingRequests, showCustomLogoMeetingRequests__is_set);
       __typeMapper.writeBoolean(__out, showEventDetailsMultiUserCalendar__typeInfo, showEventDetailsMultiUserCalendar, showEventDetailsMultiUserCalendar__is_set);
       __typeMapper.writeBoolean(__out, showHomePageHoverLinksForEvents__typeInfo, showHomePageHoverLinksForEvents, showHomePageHoverLinksForEvents__is_set);
       __typeMapper.writeBoolean(__out, showMyTasksHoverLinks__typeInfo, showMyTasksHoverLinks, showMyTasksHoverLinks__is_set);
       __typeMapper.writeBoolean(__out, showRequestedMeetingsOnHomePage__typeInfo, showRequestedMeetingsOnHomePage, showRequestedMeetingsOnHomePage__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        setAllowUsersToRelateMultipleContactsToTasksAndEvents(__in, __typeMapper);
        setEnableActivityReminders(__in, __typeMapper);
        setEnableClickCreateEvents(__in, __typeMapper);
        setEnableDragAndDropScheduling(__in, __typeMapper);
        setEnableEmailTracking(__in, __typeMapper);
        setEnableGroupTasks(__in, __typeMapper);
        setEnableListViewScheduling(__in, __typeMapper);
        setEnableLogNote(__in, __typeMapper);
        setEnableMultidayEvents(__in, __typeMapper);
        setEnableRecurringEvents(__in, __typeMapper);
        setEnableRecurringTasks(__in, __typeMapper);
        setEnableSidebarCalendarShortcut(__in, __typeMapper);
        setEnableSimpleTaskCreateUI(__in, __typeMapper);
        setEnableUNSTaskDelegatedToNotifications(__in, __typeMapper);
        setMeetingRequestsLogo(__in, __typeMapper);
        setShowCustomLogoMeetingRequests(__in, __typeMapper);
        setShowEventDetailsMultiUserCalendar(__in, __typeMapper);
        setShowHomePageHoverLinksForEvents(__in, __typeMapper);
        setShowMyTasksHoverLinks(__in, __typeMapper);
        setShowRequestedMeetingsOnHomePage(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[ActivitiesSettings ");
      sb.append(super.toString());sb.append(" allowUsersToRelateMultipleContactsToTasksAndEvents='").append(com.sforce.ws.util.Verbose.toString(allowUsersToRelateMultipleContactsToTasksAndEvents)).append("'\n");
      sb.append(" enableActivityReminders='").append(com.sforce.ws.util.Verbose.toString(enableActivityReminders)).append("'\n");
      sb.append(" enableClickCreateEvents='").append(com.sforce.ws.util.Verbose.toString(enableClickCreateEvents)).append("'\n");
      sb.append(" enableDragAndDropScheduling='").append(com.sforce.ws.util.Verbose.toString(enableDragAndDropScheduling)).append("'\n");
      sb.append(" enableEmailTracking='").append(com.sforce.ws.util.Verbose.toString(enableEmailTracking)).append("'\n");
      sb.append(" enableGroupTasks='").append(com.sforce.ws.util.Verbose.toString(enableGroupTasks)).append("'\n");
      sb.append(" enableListViewScheduling='").append(com.sforce.ws.util.Verbose.toString(enableListViewScheduling)).append("'\n");
      sb.append(" enableLogNote='").append(com.sforce.ws.util.Verbose.toString(enableLogNote)).append("'\n");
      sb.append(" enableMultidayEvents='").append(com.sforce.ws.util.Verbose.toString(enableMultidayEvents)).append("'\n");
      sb.append(" enableRecurringEvents='").append(com.sforce.ws.util.Verbose.toString(enableRecurringEvents)).append("'\n");
      sb.append(" enableRecurringTasks='").append(com.sforce.ws.util.Verbose.toString(enableRecurringTasks)).append("'\n");
      sb.append(" enableSidebarCalendarShortcut='").append(com.sforce.ws.util.Verbose.toString(enableSidebarCalendarShortcut)).append("'\n");
      sb.append(" enableSimpleTaskCreateUI='").append(com.sforce.ws.util.Verbose.toString(enableSimpleTaskCreateUI)).append("'\n");
      sb.append(" enableUNSTaskDelegatedToNotifications='").append(com.sforce.ws.util.Verbose.toString(enableUNSTaskDelegatedToNotifications)).append("'\n");
      sb.append(" meetingRequestsLogo='").append(com.sforce.ws.util.Verbose.toString(meetingRequestsLogo)).append("'\n");
      sb.append(" showCustomLogoMeetingRequests='").append(com.sforce.ws.util.Verbose.toString(showCustomLogoMeetingRequests)).append("'\n");
      sb.append(" showEventDetailsMultiUserCalendar='").append(com.sforce.ws.util.Verbose.toString(showEventDetailsMultiUserCalendar)).append("'\n");
      sb.append(" showHomePageHoverLinksForEvents='").append(com.sforce.ws.util.Verbose.toString(showHomePageHoverLinksForEvents)).append("'\n");
      sb.append(" showMyTasksHoverLinks='").append(com.sforce.ws.util.Verbose.toString(showMyTasksHoverLinks)).append("'\n");
      sb.append(" showRequestedMeetingsOnHomePage='").append(com.sforce.ws.util.Verbose.toString(showRequestedMeetingsOnHomePage)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
