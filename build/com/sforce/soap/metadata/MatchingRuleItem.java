package com.sforce.soap.metadata;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class MatchingRuleItem implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public MatchingRuleItem() {}

    /**
     * element : blankValueBehavior of type {http://soap.sforce.com/2006/04/metadata}BlankValueBehavior
     * java type: com.sforce.soap.metadata.BlankValueBehavior
     */
    private static final com.sforce.ws.bind.TypeInfo blankValueBehavior__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","blankValueBehavior","http://soap.sforce.com/2006/04/metadata","BlankValueBehavior",0,1,true);

    private boolean blankValueBehavior__is_set = false;

    private com.sforce.soap.metadata.BlankValueBehavior blankValueBehavior;

    public com.sforce.soap.metadata.BlankValueBehavior getBlankValueBehavior() {
      return blankValueBehavior;
    }

    public void setBlankValueBehavior(com.sforce.soap.metadata.BlankValueBehavior blankValueBehavior) {
      this.blankValueBehavior = blankValueBehavior;
      blankValueBehavior__is_set = true;
    }

    protected void setBlankValueBehavior(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, blankValueBehavior__typeInfo)) {
        setBlankValueBehavior((com.sforce.soap.metadata.BlankValueBehavior)__typeMapper.readObject(__in, blankValueBehavior__typeInfo, com.sforce.soap.metadata.BlankValueBehavior.class));
      }
    }

    /**
     * element : fieldName of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private static final com.sforce.ws.bind.TypeInfo fieldName__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","fieldName","http://www.w3.org/2001/XMLSchema","string",1,1,true);

    private boolean fieldName__is_set = false;

    private java.lang.String fieldName;

    public java.lang.String getFieldName() {
      return fieldName;
    }

    public void setFieldName(java.lang.String fieldName) {
      this.fieldName = fieldName;
      fieldName__is_set = true;
    }

    protected void setFieldName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, fieldName__typeInfo)) {
        setFieldName(__typeMapper.readString(__in, fieldName__typeInfo, java.lang.String.class));
      }
    }

    /**
     * element : matchingMethod of type {http://soap.sforce.com/2006/04/metadata}MatchingMethod
     * java type: com.sforce.soap.metadata.MatchingMethod
     */
    private static final com.sforce.ws.bind.TypeInfo matchingMethod__typeInfo =
      new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","matchingMethod","http://soap.sforce.com/2006/04/metadata","MatchingMethod",1,1,true);

    private boolean matchingMethod__is_set = false;

    private com.sforce.soap.metadata.MatchingMethod matchingMethod;

    public com.sforce.soap.metadata.MatchingMethod getMatchingMethod() {
      return matchingMethod;
    }

    public void setMatchingMethod(com.sforce.soap.metadata.MatchingMethod matchingMethod) {
      this.matchingMethod = matchingMethod;
      matchingMethod__is_set = true;
    }

    protected void setMatchingMethod(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, matchingMethod__typeInfo)) {
        setMatchingMethod((com.sforce.soap.metadata.MatchingMethod)__typeMapper.readObject(__in, matchingMethod__typeInfo, com.sforce.soap.metadata.MatchingMethod.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, blankValueBehavior__typeInfo, blankValueBehavior, blankValueBehavior__is_set);
       __typeMapper.writeString(__out, fieldName__typeInfo, fieldName, fieldName__is_set);
       __typeMapper.writeObject(__out, matchingMethod__typeInfo, matchingMethod, matchingMethod__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setBlankValueBehavior(__in, __typeMapper);
        setFieldName(__in, __typeMapper);
        setMatchingMethod(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[MatchingRuleItem ");
      sb.append(" blankValueBehavior='").append(com.sforce.ws.util.Verbose.toString(blankValueBehavior)).append("'\n");
      sb.append(" fieldName='").append(com.sforce.ws.util.Verbose.toString(fieldName)).append("'\n");
      sb.append(" matchingMethod='").append(com.sforce.ws.util.Verbose.toString(matchingMethod)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
