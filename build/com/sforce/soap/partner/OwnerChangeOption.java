package com.sforce.soap.partner;

/**
 * Generated by ComplexTypeCodeGenerator.java. Please do not edit.
 */
public class OwnerChangeOption implements com.sforce.ws.bind.XMLizable , IOwnerChangeOption{

    /**
     * Constructor
     */
    public OwnerChangeOption() {}

    /**
     * element : type of type {urn:partner.soap.sforce.com}OwnerChangeOptionType
     * java type: com.sforce.soap.partner.OwnerChangeOptionType
     */
    private static final com.sforce.ws.bind.TypeInfo type__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","type","urn:partner.soap.sforce.com","OwnerChangeOptionType",1,1,true);

    private boolean type__is_set = false;

    private com.sforce.soap.partner.OwnerChangeOptionType type;

    @Override
    public com.sforce.soap.partner.OwnerChangeOptionType getType() {
      return type;
    }

    @Override
    public void setType(com.sforce.soap.partner.OwnerChangeOptionType type) {
      this.type = type;
      type__is_set = true;
    }

    protected void setType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, type__typeInfo)) {
        setType((com.sforce.soap.partner.OwnerChangeOptionType)__typeMapper.readObject(__in, type__typeInfo, com.sforce.soap.partner.OwnerChangeOptionType.class));
      }
    }

    /**
     * element : execute of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private static final com.sforce.ws.bind.TypeInfo execute__typeInfo =
      new com.sforce.ws.bind.TypeInfo("urn:partner.soap.sforce.com","execute","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);

    private boolean execute__is_set = false;

    private boolean execute;

    @Override
    public boolean getExecute() {
      return execute;
    }

    @Override
    public boolean isExecute() {
      return execute;
    }

    @Override
    public void setExecute(boolean execute) {
      this.execute = execute;
      execute__is_set = true;
    }

    protected void setExecute(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, execute__typeInfo)) {
        setExecute(__typeMapper.readBoolean(__in, execute__typeInfo, boolean.class));
      }
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       __typeMapper.writeObject(__out, type__typeInfo, type, type__is_set);
       __typeMapper.writeBoolean(__out, execute__typeInfo, execute, execute__is_set);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        setType(__in, __typeMapper);
        setExecute(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[OwnerChangeOption ");
      sb.append(" type='").append(com.sforce.ws.util.Verbose.toString(type)).append("'\n");
      sb.append(" execute='").append(com.sforce.ws.util.Verbose.toString(execute)).append("'\n");
      sb.append("]\n");
      return sb.toString();
    }

}
